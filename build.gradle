import org.jetbrains.kotlin.gradle.dsl.JvmTarget

import java.time.LocalDate

plugins {
	id "java"
	id "org.jetbrains.kotlin.jvm" version "2.0.21"
	id "idea"
	id "application"
	id "jacoco"
	id "org.danilopianini.git-sensitive-semantic-versioning-gradle-plugin" version "3.1.7"
	id "io.freefair.lombok" version "8.10.2"
	id "com.diffplug.spotless" version "6.25.0"
	id "org.openapi.generator" version "7.9.0"
	id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.25"
	id "org.flywaydb.flyway" version "11.0.1" apply false
	id "nu.studer.jooq" version "9.0" apply false
	id "io.micronaut.application" version "4.4.4"
}

group "com.autonomouslogic.everef"

java {
	toolchain {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
	}
}

compileKotlin {
	compilerOptions {
		jvmTarget = JvmTarget.JVM_17
	}
}

ext {
	mainClassName = "com.autonomouslogic.everef.Main"
	envProperties = new Properties()
	if (file("local.env").exists()) {
		file("local.env").withInputStream { envProperties.load(it) }
	}
	micronautVersion = "4.6.3"
}

repositories {
	mavenLocal()
	mavenCentral()
}

java {
	withJavadocJar()
	withSourcesJar()
}

dependencies {
	annotationProcessor "com.google.dagger:dagger-compiler:2.52"
	implementation project(":database")
	implementation "com.google.dagger:dagger:2.52"
	implementation "com.google.guava:guava:33.3.1-jre"
	implementation "org.apache.logging.log4j:log4j-api:2.24.1"
	implementation "org.apache.logging.log4j:log4j-core:2.24.1"
	implementation "org.apache.logging.log4j:log4j-layout-template-json:2.24.1"
	implementation "org.apache.logging.log4j:log4j-slf4j2-impl:2.24.1"
	implementation "io.reactivex.rxjava3:rxjava:3.1.9"
	implementation "com.autonomouslogic.commons:commons-java:1.9.2"
	implementation("de.neuland-bfi:pug4j:2.2.0") {
		exclude group: "org.graalvm.js"
		exclude group: "org.graalvm.sdk"
		exclude group: "org.graalvm.compiler"
		exclude group: "org.graalvm.tools"
		exclude group: "com.vladsch.flexmark"
	}
	implementation "software.amazon.awssdk:s3:2.29.6"
	implementation "software.amazon.awssdk:dynamodb:2.29.6"
	implementation "com.autonomouslogic.dynamomapper:dynamo-mapper:2.1.17"
	implementation "com.fasterxml.jackson.core:jackson-annotations:2.18.1"
	implementation "com.fasterxml.jackson.core:jackson-core:2.18.1"
	implementation "com.fasterxml.jackson.core:jackson-databind:2.18.1"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.1"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.18.1"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.1"
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.18.1"
	implementation "org.apache.commons:commons-pool2:2.12.0"
	implementation "org.apache.commons:commons-compress:1.27.1"
	implementation "org.tukaani:xz:1.10"
	implementation "com.h2database:h2-mvstore:2.3.232"
	implementation "com.squareup.okhttp3:okhttp:4.12.0"
	implementation "org.apache.commons:commons-csv:1.12.0"
	implementation "net.gpedro.integrations.slack:slack-webhook:1.4.0"
	implementation "org.jsoup:jsoup:1.18.1"
	implementation "commons-codec:commons-codec:1.17.1"
	implementation "io.dropwizard.metrics:metrics-core:4.2.28"
	implementation "com.autonomouslogic.customspecfilter:custom-spec-filter:1.2.1"
	implementation "io.swagger.core.v3:swagger-core:2.2.25"
	implementation "io.swagger.core.v3:swagger-jaxrs2:2.2.25"
	implementation "javax.ws.rs:javax.ws.rs-api:2.1.1"
	implementation "javax.annotation:javax.annotation-api:1.3.2"
	implementation "org.openapitools:jackson-databind-nullable:0.2.6"
	implementation "org.apache.commons:commons-rng-simple:1.6"
	implementation "org.bouncycastle:bcprov-jdk18on:1.79"
	implementation "io.sentry:sentry:7.16.0"
	implementation "com.github.scribejava:scribejava-core:8.3.3"
	implementation "org.apache.commons:commons-lang3:3.17.0"

	implementation "org.jooq:jooq:3.19.15"
	implementation "org.flywaydb:flyway-core:11.0.1"
	implementation "org.flywaydb:flyway-database-postgresql:11.0.1"
	implementation "com.h2database:h2:2.3.232"
	implementation "org.postgresql:postgresql:42.7.4"

	annotationProcessor "io.micronaut.jaxrs:micronaut-jaxrs-processor"
	implementation "io.micronaut.platform:micronaut-parent:$micronautVersion"
	implementation "io.micronaut:micronaut-jackson-databind"
	implementation "io.micronaut.jaxrs:micronaut-jaxrs-server"
	implementation "io.micronaut:micronaut-management"

	testAnnotationProcessor "com.google.dagger:dagger-compiler:2.52"
	testImplementation "com.google.dagger:dagger:2.52"
	testImplementation "org.junit.jupiter:junit-jupiter:5.11.3"
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.11.3"
	testImplementation "org.junit-pioneer:junit-pioneer:2.3.0"
	testImplementation "org.mockito:mockito-junit-jupiter:5.14.2"
	testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
}

task refDataSpec(type: io.swagger.v3.plugins.gradle.tasks.ResolveTask) {
	filterClass = "com.autonomouslogic.customspecfilter.CustomSpecFilter"
	outputFormat = "YAML"
	prettyPrint = "true"
	classpath = sourceSets.main.runtimeClasspath
	resourcePackages = ["com.autonomouslogic.everef.refdata"]
	outputDir = file("spec")
	outputFileName = "reference-data"

	classpath = sourceSets.main.runtimeClasspath
	buildClasspath = classpath
}

task referenceDataClientGenerate(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	group = "openapi tools"
	generatorName = "java"
	library = "native"
	inputSpec = "$rootDir/spec/reference-data.yaml"
	outputDir = "$buildDir/generated/openapi/refdata"
	apiPackage = "com.autonomouslogic.everef.openapi.refdata.apis"
	invokerPackage = "com.autonomouslogic.everef.openapi.refdata.invoker"
	configOptions = [
			serializationLibrary: "jackson",
			dateLibrary: "java8",
			asyncNative: "true"
	]
	additionalProperties = [
			supportUrlQuery: "false"
	]
	schemaMappings = [
			"Blueprint": "com.autonomouslogic.everef.refdata.Blueprint",
			"BlueprintActivity": "com.autonomouslogic.everef.refdata.BlueprintActivity",
			"BlueprintMaterial": "com.autonomouslogic.everef.refdata.BlueprintMaterial",
			"DogmaAttribute": "com.autonomouslogic.everef.refdata.DogmaAttribute",
			"DogmaEffect": "com.autonomouslogic.everef.refdata.DogmaEffect",
			"DogmaTypeAttribute": "com.autonomouslogic.everef.refdata.DogmaTypeAttribute",
			"DogmaTypeEffect": "com.autonomouslogic.everef.refdata.DogmaTypeEffect",
			"Icon": "com.autonomouslogic.everef.refdata.Icon",
			"InventoryCategory": "com.autonomouslogic.everef.refdata.InventoryCategory",
			"InventoryGroup": "com.autonomouslogic.everef.refdata.InventoryGroup",
			"InventoryType": "com.autonomouslogic.everef.refdata.InventoryType",
			"InventoryTypeTraits": "com.autonomouslogic.everef.refdata.InventoryTypeTraits",
			"MarketGroup": "com.autonomouslogic.everef.refdata.MarketGroup",
			"MetaGroup": "com.autonomouslogic.everef.refdata.MetaGroup",
			"ModifierInfo": "com.autonomouslogic.everef.refdata.ModifierInfo",
			"Mutaplasmid": "com.autonomouslogic.everef.refdata.Mutaplasmid",
			"MutaplasmidDogmaModifications": "com.autonomouslogic.everef.refdata.MutaplasmidDogmaModifications",
			"MutaplasmidTypeMapping": "com.autonomouslogic.everef.refdata.MutaplasmidTypeMapping",
			"ProducingBlueprint": "com.autonomouslogic.everef.refdata.ProducingBlueprint",
			"RefDataMeta": "com.autonomouslogic.everef.refdata.RefDataMeta",
			"RefDataMetaFileInfo": "com.autonomouslogic.everef.refdata.RefDataMetaFileInfo",
			"Skill": "com.autonomouslogic.everef.refdata.Skill",
			"TraitBonus": "com.autonomouslogic.everef.refdata.TraitBonus",
			"TypeMaterial": "com.autonomouslogic.everef.refdata.TypeMaterial",
			"Unit": "com.autonomouslogic.everef.refdata.Unit"
	]
	logToStderr = true
}
sourceSets.main.java.srcDirs files("${buildDir}/generated/openapi/refdata/src/main/java")
		.builtBy(tasks.referenceDataClientGenerate)
compileKotlin.dependsOn(tasks.referenceDataClientGenerate)
compileJava.dependsOn(tasks.referenceDataClientGenerate)
sourcesJar.dependsOn(tasks.referenceDataClientGenerate)
delombok.dependsOn(tasks.referenceDataClientGenerate)

openApiGenerate {
	generatorName = "kotlin"
	inputSpec = "$rootDir/spec/esi-swagger.json"
	packageName = "${group}.openapi.esi"
	configOptions = [
		library: "jvm-okhttp4",
		serializationLibrary: "jackson",
		dateLibrary: "java8"
	]
}
sourceSets.main.java.srcDirs files("${buildDir}/generate-resources/main/src/main/kotlin")
		.builtBy(tasks.openApiGenerate)
compileKotlin.dependsOn(tasks.openApiGenerate)
compileJava.dependsOn(tasks.openApiGenerate)
sourcesJar.dependsOn(tasks.openApiGenerate)
delombok.dependsOn(tasks.openApiGenerate)

test {
	environment "LOG_LEVEL", "trace"
	environment "DATABASE_URL", "jdbc:h2:file:${buildDir}/db/database-test;AUTO_SERVER=TRUE"
	jvmArgs "-client", "-XX:+UseG1GC", "-Xmx8g", "-Dorg.jooq.no-logo=true", "-Dorg.jooq.no-tips=true"

	useJUnitPlatform()
	testLogging {
		events = [ "FAILED", "PASSED", "SKIPPED" ]
		showExceptions = true
		exceptionFormat = "FULL"
		showExceptions = true
		showCauses = true
		showStackTraces = true
	}
	// https://junit-pioneer.org/docs/environment-variables/#warnings-for-reflective-access
	jvmArgs("--add-opens", "java.base/java.util=ALL-UNNAMED", "--add-opens", "java.base/java.lang=ALL-UNNAMED")
}

jacocoTestReport {
	executionData(test)
	reports {
		xml.required = true
		html.required = true
	}
}

spotless {
	java {
		target "src/**/*.java"
		palantirJavaFormat()
		indentWithTabs()
	}

	groovyGradle {
		indentWithTabs()
	}
}

gitSemVer {
	buildMetadataSeparator.set("-")
}

micronaut {
	version "$micronautVersion"
	runtime("netty")
	testRuntime("junit5")
}

application {
	mainClass = mainClassName
	applicationDefaultJvmArgs = [
		"-XX:+PrintCommandLineFlags",
		"-XX:MinHeapSize=" + 10 * 1024 * 1024,
		"-XX:MaxRAMPercentage=80.0",
		"-Dorg.jooq.no-logo=true",
		"-Dorg.jooq.no-tips=true"
	]
}

task placeholder(type: JavaExec) {
	group "application"
	args "placeholder"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task dataIndex(type: JavaExec) {
	group "application"
	args "data-index"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task scrapeMarketOrders(type: JavaExec) {
	group "application"
	args "scrape-market-orders"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task scrapePublicContracts(type: JavaExec) {
	group "application"
	args "scrape-public-contracts"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task buildRefData(type: JavaExec) {
	group "application"
	args "build-ref-data"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task publishRefData(type: JavaExec) {
	group "application"
	args "publish-ref-data"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task scrapeMarketHistory(type: JavaExec) {
	group "application"
	args "scrape-market-history"
	environment envProperties
	environment "ESI_RATE_LIMIT_PER_S", "5"
	environment "ESI_MARKET_HISTORY_CHUNK_SIZE", "10000"
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task syncFuzzworkOrdersets(type: JavaExec) {
	group "application"
	args "sync-fuzzwork-ordersets"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task verifyRefDataModels(type: JavaExec) {
	group "application"
	args "verify-ref-data-models"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task scrapeHoboleaks(type: JavaExec) {
	group "application"
	args "scrape-hoboleaks"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task importTestResources(type: JavaExec) {
	group "application"
	args "import-test-resources"
	environment envProperties
	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task flywayMigrate(type: JavaExec) {
	group "application"
	args "flyway-migrate"
	environment "DATABASE_URL", "jdbc:h2:file:${buildDir}/everef-data;AUTO_SERVER=true"
	environment envProperties

	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task importMarketHistory(type: JavaExec) {
	group "application"
	args "import-market-history"
	environment envProperties
	environment "LOG_LEVEL", "debug"
	environment "DATABASE_URL", "jdbc:h2:file:${buildDir}/everef-data;AUTO_SERVER=true"
	environment "IMPORT_MARKET_HISTORY_MIN_DATE", LocalDate.now().minusDays(7).toString();

	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task basicLogin(type: JavaExec) {
	group "application"
	args "basic-login"
	environment envProperties

	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task scrapeStructures(type: JavaExec) {
	group "application"
	args "scrape-structures"
	environment envProperties

	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task buildSearch(type: JavaExec) {
	group "application"
	args "build-search"
	environment envProperties

	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}

task fetchDonations(type: JavaExec) {
	group "application"
	args "fetch-donations"
	environment envProperties

	classpath = sourceSets.main.runtimeClasspath
	mainClass = mainClassName
}
