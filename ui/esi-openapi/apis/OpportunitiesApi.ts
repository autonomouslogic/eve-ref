/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdOpportunities200Ok,
  GetOpportunitiesGroupsGroupIdOk,
  GetOpportunitiesTasksTaskIdOk,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdOpportunities200OkFromJSON,
    GetCharactersCharacterIdOpportunities200OkToJSON,
    GetOpportunitiesGroupsGroupIdOkFromJSON,
    GetOpportunitiesGroupsGroupIdOkToJSON,
    GetOpportunitiesTasksTaskIdOkFromJSON,
    GetOpportunitiesTasksTaskIdOkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdOpportunitiesRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdOpportunitiesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetOpportunitiesGroupsRequest {
    datasource?: GetOpportunitiesGroupsDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetOpportunitiesGroupsGroupIdRequest {
    groupId: number;
    acceptLanguage?: GetOpportunitiesGroupsGroupIdAcceptLanguageEnum;
    datasource?: GetOpportunitiesGroupsGroupIdDatasourceEnum;
    ifNoneMatch?: string;
    language?: GetOpportunitiesGroupsGroupIdLanguageEnum;
}

export interface GetOpportunitiesTasksRequest {
    datasource?: GetOpportunitiesTasksDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetOpportunitiesTasksTaskIdRequest {
    taskId: number;
    datasource?: GetOpportunitiesTasksTaskIdDatasourceEnum;
    ifNoneMatch?: string;
}

/**
 * 
 */
export class OpportunitiesApi extends runtime.BaseAPI {

    /**
     * Return a list of tasks finished by a character  --- Alternate route: `/dev/characters/{character_id}/opportunities/`  Alternate route: `/legacy/characters/{character_id}/opportunities/`  Alternate route: `/v1/characters/{character_id}/opportunities/`  --- This route is cached for up to 3600 seconds
     * Get a character\'s completed tasks
     */
    async getCharactersCharacterIdOpportunitiesRaw(requestParameters: GetCharactersCharacterIdOpportunitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdOpportunities200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdOpportunities.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_opportunities.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/opportunities/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdOpportunities200OkFromJSON));
    }

    /**
     * Return a list of tasks finished by a character  --- Alternate route: `/dev/characters/{character_id}/opportunities/`  Alternate route: `/legacy/characters/{character_id}/opportunities/`  Alternate route: `/v1/characters/{character_id}/opportunities/`  --- This route is cached for up to 3600 seconds
     * Get a character\'s completed tasks
     */
    async getCharactersCharacterIdOpportunities(requestParameters: GetCharactersCharacterIdOpportunitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdOpportunities200Ok>> {
        const response = await this.getCharactersCharacterIdOpportunitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of opportunities groups  --- Alternate route: `/dev/opportunities/groups/`  Alternate route: `/legacy/opportunities/groups/`  Alternate route: `/v1/opportunities/groups/`  --- This route expires daily at 11:05
     * Get opportunities groups
     */
    async getOpportunitiesGroupsRaw(requestParameters: GetOpportunitiesGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/opportunities/groups/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return a list of opportunities groups  --- Alternate route: `/dev/opportunities/groups/`  Alternate route: `/legacy/opportunities/groups/`  Alternate route: `/v1/opportunities/groups/`  --- This route expires daily at 11:05
     * Get opportunities groups
     */
    async getOpportunitiesGroups(requestParameters: GetOpportunitiesGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getOpportunitiesGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information of an opportunities group  --- Alternate route: `/dev/opportunities/groups/{group_id}/`  Alternate route: `/legacy/opportunities/groups/{group_id}/`  Alternate route: `/v1/opportunities/groups/{group_id}/`  --- This route expires daily at 11:05
     * Get opportunities group
     */
    async getOpportunitiesGroupsGroupIdRaw(requestParameters: GetOpportunitiesGroupsGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpportunitiesGroupsGroupIdOk>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getOpportunitiesGroupsGroupId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/opportunities/groups/{group_id}/`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOpportunitiesGroupsGroupIdOkFromJSON(jsonValue));
    }

    /**
     * Return information of an opportunities group  --- Alternate route: `/dev/opportunities/groups/{group_id}/`  Alternate route: `/legacy/opportunities/groups/{group_id}/`  Alternate route: `/v1/opportunities/groups/{group_id}/`  --- This route expires daily at 11:05
     * Get opportunities group
     */
    async getOpportunitiesGroupsGroupId(requestParameters: GetOpportunitiesGroupsGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpportunitiesGroupsGroupIdOk> {
        const response = await this.getOpportunitiesGroupsGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of opportunities tasks  --- Alternate route: `/dev/opportunities/tasks/`  Alternate route: `/legacy/opportunities/tasks/`  Alternate route: `/v1/opportunities/tasks/`  --- This route expires daily at 11:05
     * Get opportunities tasks
     */
    async getOpportunitiesTasksRaw(requestParameters: GetOpportunitiesTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/opportunities/tasks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return a list of opportunities tasks  --- Alternate route: `/dev/opportunities/tasks/`  Alternate route: `/legacy/opportunities/tasks/`  Alternate route: `/v1/opportunities/tasks/`  --- This route expires daily at 11:05
     * Get opportunities tasks
     */
    async getOpportunitiesTasks(requestParameters: GetOpportunitiesTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getOpportunitiesTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information of an opportunities task  --- Alternate route: `/dev/opportunities/tasks/{task_id}/`  Alternate route: `/legacy/opportunities/tasks/{task_id}/`  Alternate route: `/v1/opportunities/tasks/{task_id}/`  --- This route expires daily at 11:05
     * Get opportunities task
     */
    async getOpportunitiesTasksTaskIdRaw(requestParameters: GetOpportunitiesTasksTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpportunitiesTasksTaskIdOk>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getOpportunitiesTasksTaskId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/opportunities/tasks/{task_id}/`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOpportunitiesTasksTaskIdOkFromJSON(jsonValue));
    }

    /**
     * Return information of an opportunities task  --- Alternate route: `/dev/opportunities/tasks/{task_id}/`  Alternate route: `/legacy/opportunities/tasks/{task_id}/`  Alternate route: `/v1/opportunities/tasks/{task_id}/`  --- This route expires daily at 11:05
     * Get opportunities task
     */
    async getOpportunitiesTasksTaskId(requestParameters: GetOpportunitiesTasksTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpportunitiesTasksTaskIdOk> {
        const response = await this.getOpportunitiesTasksTaskIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdOpportunitiesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdOpportunitiesDatasourceEnum = typeof GetCharactersCharacterIdOpportunitiesDatasourceEnum[keyof typeof GetCharactersCharacterIdOpportunitiesDatasourceEnum];
/**
 * @export
 */
export const GetOpportunitiesGroupsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetOpportunitiesGroupsDatasourceEnum = typeof GetOpportunitiesGroupsDatasourceEnum[keyof typeof GetOpportunitiesGroupsDatasourceEnum];
/**
 * @export
 */
export const GetOpportunitiesGroupsGroupIdAcceptLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetOpportunitiesGroupsGroupIdAcceptLanguageEnum = typeof GetOpportunitiesGroupsGroupIdAcceptLanguageEnum[keyof typeof GetOpportunitiesGroupsGroupIdAcceptLanguageEnum];
/**
 * @export
 */
export const GetOpportunitiesGroupsGroupIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetOpportunitiesGroupsGroupIdDatasourceEnum = typeof GetOpportunitiesGroupsGroupIdDatasourceEnum[keyof typeof GetOpportunitiesGroupsGroupIdDatasourceEnum];
/**
 * @export
 */
export const GetOpportunitiesGroupsGroupIdLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetOpportunitiesGroupsGroupIdLanguageEnum = typeof GetOpportunitiesGroupsGroupIdLanguageEnum[keyof typeof GetOpportunitiesGroupsGroupIdLanguageEnum];
/**
 * @export
 */
export const GetOpportunitiesTasksDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetOpportunitiesTasksDatasourceEnum = typeof GetOpportunitiesTasksDatasourceEnum[keyof typeof GetOpportunitiesTasksDatasourceEnum];
/**
 * @export
 */
export const GetOpportunitiesTasksTaskIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetOpportunitiesTasksTaskIdDatasourceEnum = typeof GetOpportunitiesTasksTaskIdDatasourceEnum[keyof typeof GetOpportunitiesTasksTaskIdDatasourceEnum];
