/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdLoyaltyPoints200Ok,
  GetLoyaltyStoresCorporationIdOffers200Ok,
  GetLoyaltyStoresCorporationIdOffersNotFound,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdLoyaltyPoints200OkFromJSON,
    GetCharactersCharacterIdLoyaltyPoints200OkToJSON,
    GetLoyaltyStoresCorporationIdOffers200OkFromJSON,
    GetLoyaltyStoresCorporationIdOffers200OkToJSON,
    GetLoyaltyStoresCorporationIdOffersNotFoundFromJSON,
    GetLoyaltyStoresCorporationIdOffersNotFoundToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdLoyaltyPointsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdLoyaltyPointsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetLoyaltyStoresCorporationIdOffersRequest {
    corporationId: number;
    datasource?: GetLoyaltyStoresCorporationIdOffersDatasourceEnum;
    ifNoneMatch?: string;
}

/**
 * 
 */
export class LoyaltyApi extends runtime.BaseAPI {

    /**
     * Return a list of loyalty points for all corporations the character has worked for  --- Alternate route: `/dev/characters/{character_id}/loyalty/points/`  Alternate route: `/legacy/characters/{character_id}/loyalty/points/`  Alternate route: `/v1/characters/{character_id}/loyalty/points/`  --- This route is cached for up to 3600 seconds
     * Get loyalty points
     */
    async getCharactersCharacterIdLoyaltyPointsRaw(requestParameters: GetCharactersCharacterIdLoyaltyPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdLoyaltyPoints200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdLoyaltyPoints.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_loyalty.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/loyalty/points/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdLoyaltyPoints200OkFromJSON));
    }

    /**
     * Return a list of loyalty points for all corporations the character has worked for  --- Alternate route: `/dev/characters/{character_id}/loyalty/points/`  Alternate route: `/legacy/characters/{character_id}/loyalty/points/`  Alternate route: `/v1/characters/{character_id}/loyalty/points/`  --- This route is cached for up to 3600 seconds
     * Get loyalty points
     */
    async getCharactersCharacterIdLoyaltyPoints(requestParameters: GetCharactersCharacterIdLoyaltyPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdLoyaltyPoints200Ok>> {
        const response = await this.getCharactersCharacterIdLoyaltyPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of offers from a specific corporation\'s loyalty store  --- Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`  Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`  Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`  --- This route expires daily at 11:05
     * List loyalty store offers
     */
    async getLoyaltyStoresCorporationIdOffersRaw(requestParameters: GetLoyaltyStoresCorporationIdOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetLoyaltyStoresCorporationIdOffers200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getLoyaltyStoresCorporationIdOffers.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/loyalty/stores/{corporation_id}/offers/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetLoyaltyStoresCorporationIdOffers200OkFromJSON));
    }

    /**
     * Return a list of offers from a specific corporation\'s loyalty store  --- Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`  Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`  Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`  --- This route expires daily at 11:05
     * List loyalty store offers
     */
    async getLoyaltyStoresCorporationIdOffers(requestParameters: GetLoyaltyStoresCorporationIdOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetLoyaltyStoresCorporationIdOffers200Ok>> {
        const response = await this.getLoyaltyStoresCorporationIdOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdLoyaltyPointsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdLoyaltyPointsDatasourceEnum = typeof GetCharactersCharacterIdLoyaltyPointsDatasourceEnum[keyof typeof GetCharactersCharacterIdLoyaltyPointsDatasourceEnum];
/**
 * @export
 */
export const GetLoyaltyStoresCorporationIdOffersDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetLoyaltyStoresCorporationIdOffersDatasourceEnum = typeof GetLoyaltyStoresCorporationIdOffersDatasourceEnum[keyof typeof GetLoyaltyStoresCorporationIdOffersDatasourceEnum];
