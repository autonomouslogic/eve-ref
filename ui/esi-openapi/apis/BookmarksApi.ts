/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdBookmarks200Ok,
  GetCharactersCharacterIdBookmarksFolders200Ok,
  GetCorporationsCorporationIdBookmarks200Ok,
  GetCorporationsCorporationIdBookmarksFolders200Ok,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdBookmarks200OkFromJSON,
    GetCharactersCharacterIdBookmarks200OkToJSON,
    GetCharactersCharacterIdBookmarksFolders200OkFromJSON,
    GetCharactersCharacterIdBookmarksFolders200OkToJSON,
    GetCorporationsCorporationIdBookmarks200OkFromJSON,
    GetCorporationsCorporationIdBookmarks200OkToJSON,
    GetCorporationsCorporationIdBookmarksFolders200OkFromJSON,
    GetCorporationsCorporationIdBookmarksFolders200OkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdBookmarksRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdBookmarksDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCharactersCharacterIdBookmarksFoldersRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdBookmarksFoldersDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdBookmarksRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdBookmarksDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdBookmarksFoldersRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdBookmarksFoldersDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

/**
 * 
 */
export class BookmarksApi extends runtime.BaseAPI {

    /**
     * A list of your character\'s personal bookmarks  --- Alternate route: `/dev/characters/{character_id}/bookmarks/`  Alternate route: `/v2/characters/{character_id}/bookmarks/`  --- This route is cached for up to 3600 seconds
     * List bookmarks
     */
    async getCharactersCharacterIdBookmarksRaw(requestParameters: GetCharactersCharacterIdBookmarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdBookmarks200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdBookmarks.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-bookmarks.read_character_bookmarks.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/bookmarks/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdBookmarks200OkFromJSON));
    }

    /**
     * A list of your character\'s personal bookmarks  --- Alternate route: `/dev/characters/{character_id}/bookmarks/`  Alternate route: `/v2/characters/{character_id}/bookmarks/`  --- This route is cached for up to 3600 seconds
     * List bookmarks
     */
    async getCharactersCharacterIdBookmarks(requestParameters: GetCharactersCharacterIdBookmarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdBookmarks200Ok>> {
        const response = await this.getCharactersCharacterIdBookmarksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A list of your character\'s personal bookmark folders  --- Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`  Alternate route: `/v2/characters/{character_id}/bookmarks/folders/`  --- This route is cached for up to 3600 seconds
     * List bookmark folders
     */
    async getCharactersCharacterIdBookmarksFoldersRaw(requestParameters: GetCharactersCharacterIdBookmarksFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdBookmarksFolders200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdBookmarksFolders.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-bookmarks.read_character_bookmarks.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/bookmarks/folders/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdBookmarksFolders200OkFromJSON));
    }

    /**
     * A list of your character\'s personal bookmark folders  --- Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`  Alternate route: `/v2/characters/{character_id}/bookmarks/folders/`  --- This route is cached for up to 3600 seconds
     * List bookmark folders
     */
    async getCharactersCharacterIdBookmarksFolders(requestParameters: GetCharactersCharacterIdBookmarksFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdBookmarksFolders200Ok>> {
        const response = await this.getCharactersCharacterIdBookmarksFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A list of your corporation\'s bookmarks  --- Alternate route: `/dev/corporations/{corporation_id}/bookmarks/`  Alternate route: `/legacy/corporations/{corporation_id}/bookmarks/`  Alternate route: `/v1/corporations/{corporation_id}/bookmarks/`  --- This route is cached for up to 3600 seconds
     * List corporation bookmarks
     */
    async getCorporationsCorporationIdBookmarksRaw(requestParameters: GetCorporationsCorporationIdBookmarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdBookmarks200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdBookmarks.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-bookmarks.read_corporation_bookmarks.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/bookmarks/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdBookmarks200OkFromJSON));
    }

    /**
     * A list of your corporation\'s bookmarks  --- Alternate route: `/dev/corporations/{corporation_id}/bookmarks/`  Alternate route: `/legacy/corporations/{corporation_id}/bookmarks/`  Alternate route: `/v1/corporations/{corporation_id}/bookmarks/`  --- This route is cached for up to 3600 seconds
     * List corporation bookmarks
     */
    async getCorporationsCorporationIdBookmarks(requestParameters: GetCorporationsCorporationIdBookmarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdBookmarks200Ok>> {
        const response = await this.getCorporationsCorporationIdBookmarksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A list of your corporation\'s bookmark folders  --- Alternate route: `/dev/corporations/{corporation_id}/bookmarks/folders/`  Alternate route: `/legacy/corporations/{corporation_id}/bookmarks/folders/`  Alternate route: `/v1/corporations/{corporation_id}/bookmarks/folders/`  --- This route is cached for up to 3600 seconds
     * List corporation bookmark folders
     */
    async getCorporationsCorporationIdBookmarksFoldersRaw(requestParameters: GetCorporationsCorporationIdBookmarksFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdBookmarksFolders200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdBookmarksFolders.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-bookmarks.read_corporation_bookmarks.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/bookmarks/folders/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdBookmarksFolders200OkFromJSON));
    }

    /**
     * A list of your corporation\'s bookmark folders  --- Alternate route: `/dev/corporations/{corporation_id}/bookmarks/folders/`  Alternate route: `/legacy/corporations/{corporation_id}/bookmarks/folders/`  Alternate route: `/v1/corporations/{corporation_id}/bookmarks/folders/`  --- This route is cached for up to 3600 seconds
     * List corporation bookmark folders
     */
    async getCorporationsCorporationIdBookmarksFolders(requestParameters: GetCorporationsCorporationIdBookmarksFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdBookmarksFolders200Ok>> {
        const response = await this.getCorporationsCorporationIdBookmarksFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdBookmarksDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdBookmarksDatasourceEnum = typeof GetCharactersCharacterIdBookmarksDatasourceEnum[keyof typeof GetCharactersCharacterIdBookmarksDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdBookmarksFoldersDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdBookmarksFoldersDatasourceEnum = typeof GetCharactersCharacterIdBookmarksFoldersDatasourceEnum[keyof typeof GetCharactersCharacterIdBookmarksFoldersDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdBookmarksDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdBookmarksDatasourceEnum = typeof GetCorporationsCorporationIdBookmarksDatasourceEnum[keyof typeof GetCorporationsCorporationIdBookmarksDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdBookmarksFoldersDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdBookmarksFoldersDatasourceEnum = typeof GetCorporationsCorporationIdBookmarksFoldersDatasourceEnum[keyof typeof GetCorporationsCorporationIdBookmarksFoldersDatasourceEnum];
