/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  GatewayTimeout,
  GetInsurancePrices200Ok,
  InternalServerError,
  ServiceUnavailable,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetInsurancePrices200OkFromJSON,
    GetInsurancePrices200OkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
} from '../models';

export interface GetInsurancePricesRequest {
    acceptLanguage?: GetInsurancePricesAcceptLanguageEnum;
    datasource?: GetInsurancePricesDatasourceEnum;
    ifNoneMatch?: string;
    language?: GetInsurancePricesLanguageEnum;
}

/**
 * 
 */
export class InsuranceApi extends runtime.BaseAPI {

    /**
     * Return available insurance levels for all ship types  --- Alternate route: `/dev/insurance/prices/`  Alternate route: `/legacy/insurance/prices/`  Alternate route: `/v1/insurance/prices/`  --- This route is cached for up to 3600 seconds
     * List insurance levels
     */
    async getInsurancePricesRaw(requestParameters: GetInsurancePricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetInsurancePrices200Ok>>> {
        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/insurance/prices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetInsurancePrices200OkFromJSON));
    }

    /**
     * Return available insurance levels for all ship types  --- Alternate route: `/dev/insurance/prices/`  Alternate route: `/legacy/insurance/prices/`  Alternate route: `/v1/insurance/prices/`  --- This route is cached for up to 3600 seconds
     * List insurance levels
     */
    async getInsurancePrices(requestParameters: GetInsurancePricesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetInsurancePrices200Ok>> {
        const response = await this.getInsurancePricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetInsurancePricesAcceptLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetInsurancePricesAcceptLanguageEnum = typeof GetInsurancePricesAcceptLanguageEnum[keyof typeof GetInsurancePricesAcceptLanguageEnum];
/**
 * @export
 */
export const GetInsurancePricesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetInsurancePricesDatasourceEnum = typeof GetInsurancePricesDatasourceEnum[keyof typeof GetInsurancePricesDatasourceEnum];
/**
 * @export
 */
export const GetInsurancePricesLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetInsurancePricesLanguageEnum = typeof GetInsurancePricesLanguageEnum[keyof typeof GetInsurancePricesLanguageEnum];
