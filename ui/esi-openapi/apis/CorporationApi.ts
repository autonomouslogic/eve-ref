/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCorporationsCorporationIdAlliancehistory200Ok,
  GetCorporationsCorporationIdBlueprints200Ok,
  GetCorporationsCorporationIdContainersLogs200Ok,
  GetCorporationsCorporationIdDivisionsOk,
  GetCorporationsCorporationIdFacilities200Ok,
  GetCorporationsCorporationIdIconsNotFound,
  GetCorporationsCorporationIdIconsOk,
  GetCorporationsCorporationIdMedals200Ok,
  GetCorporationsCorporationIdMedalsIssued200Ok,
  GetCorporationsCorporationIdMembersTitles200Ok,
  GetCorporationsCorporationIdMembertracking200Ok,
  GetCorporationsCorporationIdNotFound,
  GetCorporationsCorporationIdOk,
  GetCorporationsCorporationIdRoles200Ok,
  GetCorporationsCorporationIdRolesHistory200Ok,
  GetCorporationsCorporationIdShareholders200Ok,
  GetCorporationsCorporationIdStandings200Ok,
  GetCorporationsCorporationIdStarbases200Ok,
  GetCorporationsCorporationIdStarbasesStarbaseIdOk,
  GetCorporationsCorporationIdStructures200Ok,
  GetCorporationsCorporationIdTitles200Ok,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCorporationsCorporationIdAlliancehistory200OkFromJSON,
    GetCorporationsCorporationIdAlliancehistory200OkToJSON,
    GetCorporationsCorporationIdBlueprints200OkFromJSON,
    GetCorporationsCorporationIdBlueprints200OkToJSON,
    GetCorporationsCorporationIdContainersLogs200OkFromJSON,
    GetCorporationsCorporationIdContainersLogs200OkToJSON,
    GetCorporationsCorporationIdDivisionsOkFromJSON,
    GetCorporationsCorporationIdDivisionsOkToJSON,
    GetCorporationsCorporationIdFacilities200OkFromJSON,
    GetCorporationsCorporationIdFacilities200OkToJSON,
    GetCorporationsCorporationIdIconsNotFoundFromJSON,
    GetCorporationsCorporationIdIconsNotFoundToJSON,
    GetCorporationsCorporationIdIconsOkFromJSON,
    GetCorporationsCorporationIdIconsOkToJSON,
    GetCorporationsCorporationIdMedals200OkFromJSON,
    GetCorporationsCorporationIdMedals200OkToJSON,
    GetCorporationsCorporationIdMedalsIssued200OkFromJSON,
    GetCorporationsCorporationIdMedalsIssued200OkToJSON,
    GetCorporationsCorporationIdMembersTitles200OkFromJSON,
    GetCorporationsCorporationIdMembersTitles200OkToJSON,
    GetCorporationsCorporationIdMembertracking200OkFromJSON,
    GetCorporationsCorporationIdMembertracking200OkToJSON,
    GetCorporationsCorporationIdNotFoundFromJSON,
    GetCorporationsCorporationIdNotFoundToJSON,
    GetCorporationsCorporationIdOkFromJSON,
    GetCorporationsCorporationIdOkToJSON,
    GetCorporationsCorporationIdRoles200OkFromJSON,
    GetCorporationsCorporationIdRoles200OkToJSON,
    GetCorporationsCorporationIdRolesHistory200OkFromJSON,
    GetCorporationsCorporationIdRolesHistory200OkToJSON,
    GetCorporationsCorporationIdShareholders200OkFromJSON,
    GetCorporationsCorporationIdShareholders200OkToJSON,
    GetCorporationsCorporationIdStandings200OkFromJSON,
    GetCorporationsCorporationIdStandings200OkToJSON,
    GetCorporationsCorporationIdStarbases200OkFromJSON,
    GetCorporationsCorporationIdStarbases200OkToJSON,
    GetCorporationsCorporationIdStarbasesStarbaseIdOkFromJSON,
    GetCorporationsCorporationIdStarbasesStarbaseIdOkToJSON,
    GetCorporationsCorporationIdStructures200OkFromJSON,
    GetCorporationsCorporationIdStructures200OkToJSON,
    GetCorporationsCorporationIdTitles200OkFromJSON,
    GetCorporationsCorporationIdTitles200OkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCorporationsCorporationIdRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCorporationsCorporationIdAlliancehistoryRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdAlliancehistoryDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCorporationsCorporationIdBlueprintsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdBlueprintsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdContainersLogsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdContainersLogsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdDivisionsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdDivisionsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdFacilitiesRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdFacilitiesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdIconsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdIconsDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCorporationsCorporationIdMedalsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdMedalsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdMedalsIssuedRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdMedalsIssuedDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdMembersRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdMembersDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdMembersLimitRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdMembersLimitDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdMembersTitlesRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdMembersTitlesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdMembertrackingRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdMembertrackingDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdRolesRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdRolesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdRolesHistoryRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdRolesHistoryDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdShareholdersRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdShareholdersDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdStandingsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdStandingsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdStarbasesRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdStarbasesDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdStarbasesStarbaseIdRequest {
    corporationId: number;
    starbaseId: number;
    systemId: number;
    datasource?: GetCorporationsCorporationIdStarbasesStarbaseIdDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdStructuresRequest {
    corporationId: number;
    acceptLanguage?: GetCorporationsCorporationIdStructuresAcceptLanguageEnum;
    datasource?: GetCorporationsCorporationIdStructuresDatasourceEnum;
    ifNoneMatch?: string;
    language?: GetCorporationsCorporationIdStructuresLanguageEnum;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdTitlesRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdTitlesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsNpccorpsRequest {
    datasource?: GetCorporationsNpccorpsDatasourceEnum;
    ifNoneMatch?: string;
}

/**
 * 
 */
export class CorporationApi extends runtime.BaseAPI {

    /**
     * Public information about a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/`  Alternate route: `/v5/corporations/{corporation_id}/`  --- This route is cached for up to 3600 seconds
     * Get corporation information
     */
    async getCorporationsCorporationIdRaw(requestParameters: GetCorporationsCorporationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCorporationsCorporationIdOk>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCorporationsCorporationIdOkFromJSON(jsonValue));
    }

    /**
     * Public information about a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/`  Alternate route: `/v5/corporations/{corporation_id}/`  --- This route is cached for up to 3600 seconds
     * Get corporation information
     */
    async getCorporationsCorporationId(requestParameters: GetCorporationsCorporationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCorporationsCorporationIdOk> {
        const response = await this.getCorporationsCorporationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all the alliances a corporation has been a member of  --- Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`  Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`  --- This route is cached for up to 3600 seconds
     * Get alliance history
     */
    async getCorporationsCorporationIdAlliancehistoryRaw(requestParameters: GetCorporationsCorporationIdAlliancehistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdAlliancehistory200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdAlliancehistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/alliancehistory/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdAlliancehistory200OkFromJSON));
    }

    /**
     * Get a list of all the alliances a corporation has been a member of  --- Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`  Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`  --- This route is cached for up to 3600 seconds
     * Get alliance history
     */
    async getCorporationsCorporationIdAlliancehistory(requestParameters: GetCorporationsCorporationIdAlliancehistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdAlliancehistory200Ok>> {
        const response = await this.getCorporationsCorporationIdAlliancehistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of blueprints the corporation owns  --- Alternate route: `/dev/corporations/{corporation_id}/blueprints/`  Alternate route: `/v3/corporations/{corporation_id}/blueprints/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation blueprints
     */
    async getCorporationsCorporationIdBlueprintsRaw(requestParameters: GetCorporationsCorporationIdBlueprintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdBlueprints200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdBlueprints.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_blueprints.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/blueprints/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdBlueprints200OkFromJSON));
    }

    /**
     * Returns a list of blueprints the corporation owns  --- Alternate route: `/dev/corporations/{corporation_id}/blueprints/`  Alternate route: `/v3/corporations/{corporation_id}/blueprints/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation blueprints
     */
    async getCorporationsCorporationIdBlueprints(requestParameters: GetCorporationsCorporationIdBlueprintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdBlueprints200Ok>> {
        const response = await this.getCorporationsCorporationIdBlueprintsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`  Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get all corporation ALSC logs
     */
    async getCorporationsCorporationIdContainersLogsRaw(requestParameters: GetCorporationsCorporationIdContainersLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdContainersLogs200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdContainersLogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_container_logs.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/containers/logs/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdContainersLogs200OkFromJSON));
    }

    /**
     * Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`  Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get all corporation ALSC logs
     */
    async getCorporationsCorporationIdContainersLogs(requestParameters: GetCorporationsCorporationIdContainersLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdContainersLogs200Ok>> {
        const response = await this.getCorporationsCorporationIdContainersLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: `/dev/corporations/{corporation_id}/divisions/`  Alternate route: `/v2/corporations/{corporation_id}/divisions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation divisions
     */
    async getCorporationsCorporationIdDivisionsRaw(requestParameters: GetCorporationsCorporationIdDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCorporationsCorporationIdDivisionsOk>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdDivisions.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_divisions.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/divisions/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCorporationsCorporationIdDivisionsOkFromJSON(jsonValue));
    }

    /**
     * Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: `/dev/corporations/{corporation_id}/divisions/`  Alternate route: `/v2/corporations/{corporation_id}/divisions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation divisions
     */
    async getCorporationsCorporationIdDivisions(requestParameters: GetCorporationsCorporationIdDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCorporationsCorporationIdDivisionsOk> {
        const response = await this.getCorporationsCorporationIdDivisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a corporation\'s facilities  --- Alternate route: `/dev/corporations/{corporation_id}/facilities/`  Alternate route: `/v2/corporations/{corporation_id}/facilities/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager 
     * Get corporation facilities
     */
    async getCorporationsCorporationIdFacilitiesRaw(requestParameters: GetCorporationsCorporationIdFacilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdFacilities200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdFacilities.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_facilities.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/facilities/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdFacilities200OkFromJSON));
    }

    /**
     * Return a corporation\'s facilities  --- Alternate route: `/dev/corporations/{corporation_id}/facilities/`  Alternate route: `/v2/corporations/{corporation_id}/facilities/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager 
     * Get corporation facilities
     */
    async getCorporationsCorporationIdFacilities(requestParameters: GetCorporationsCorporationIdFacilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdFacilities200Ok>> {
        const response = await this.getCorporationsCorporationIdFacilitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the icon urls for a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/icons/`  Alternate route: `/v2/corporations/{corporation_id}/icons/`  --- This route is cached for up to 3600 seconds
     * Get corporation icon
     */
    async getCorporationsCorporationIdIconsRaw(requestParameters: GetCorporationsCorporationIdIconsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCorporationsCorporationIdIconsOk>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdIcons.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/icons/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCorporationsCorporationIdIconsOkFromJSON(jsonValue));
    }

    /**
     * Get the icon urls for a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/icons/`  Alternate route: `/v2/corporations/{corporation_id}/icons/`  --- This route is cached for up to 3600 seconds
     * Get corporation icon
     */
    async getCorporationsCorporationIdIcons(requestParameters: GetCorporationsCorporationIdIconsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCorporationsCorporationIdIconsOk> {
        const response = await this.getCorporationsCorporationIdIconsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a corporation\'s medals  --- Alternate route: `/dev/corporations/{corporation_id}/medals/`  Alternate route: `/v2/corporations/{corporation_id}/medals/`  --- This route is cached for up to 3600 seconds
     * Get corporation medals
     */
    async getCorporationsCorporationIdMedalsRaw(requestParameters: GetCorporationsCorporationIdMedalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdMedals200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdMedals.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_medals.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/medals/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdMedals200OkFromJSON));
    }

    /**
     * Returns a corporation\'s medals  --- Alternate route: `/dev/corporations/{corporation_id}/medals/`  Alternate route: `/v2/corporations/{corporation_id}/medals/`  --- This route is cached for up to 3600 seconds
     * Get corporation medals
     */
    async getCorporationsCorporationIdMedals(requestParameters: GetCorporationsCorporationIdMedalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdMedals200Ok>> {
        const response = await this.getCorporationsCorporationIdMedalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns medals issued by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`  Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation issued medals
     */
    async getCorporationsCorporationIdMedalsIssuedRaw(requestParameters: GetCorporationsCorporationIdMedalsIssuedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdMedalsIssued200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdMedalsIssued.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_medals.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/medals/issued/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdMedalsIssued200OkFromJSON));
    }

    /**
     * Returns medals issued by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`  Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation issued medals
     */
    async getCorporationsCorporationIdMedalsIssued(requestParameters: GetCorporationsCorporationIdMedalsIssuedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdMedalsIssued200Ok>> {
        const response = await this.getCorporationsCorporationIdMedalsIssuedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the current member list of a corporation, the token\'s character need to be a member of the corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/members/`  Alternate route: `/v4/corporations/{corporation_id}/members/`  --- This route is cached for up to 3600 seconds
     * Get corporation members
     */
    async getCorporationsCorporationIdMembersRaw(requestParameters: GetCorporationsCorporationIdMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_corporation_membership.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/members/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return the current member list of a corporation, the token\'s character need to be a member of the corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/members/`  Alternate route: `/v4/corporations/{corporation_id}/members/`  --- This route is cached for up to 3600 seconds
     * Get corporation members
     */
    async getCorporationsCorporationIdMembers(requestParameters: GetCorporationsCorporationIdMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getCorporationsCorporationIdMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a corporation\'s member limit, not including CEO himself  --- Alternate route: `/dev/corporations/{corporation_id}/members/limit/`  Alternate route: `/v2/corporations/{corporation_id}/members/limit/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation member limit
     */
    async getCorporationsCorporationIdMembersLimitRaw(requestParameters: GetCorporationsCorporationIdMembersLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdMembersLimit.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.track_members.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/members/limit/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Return a corporation\'s member limit, not including CEO himself  --- Alternate route: `/dev/corporations/{corporation_id}/members/limit/`  Alternate route: `/v2/corporations/{corporation_id}/members/limit/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation member limit
     */
    async getCorporationsCorporationIdMembersLimit(requestParameters: GetCorporationsCorporationIdMembersLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getCorporationsCorporationIdMembersLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a corporation\'s members\' titles  --- Alternate route: `/dev/corporations/{corporation_id}/members/titles/`  Alternate route: `/v2/corporations/{corporation_id}/members/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation\'s members\' titles
     */
    async getCorporationsCorporationIdMembersTitlesRaw(requestParameters: GetCorporationsCorporationIdMembersTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdMembersTitles200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdMembersTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_titles.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/members/titles/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdMembersTitles200OkFromJSON));
    }

    /**
     * Returns a corporation\'s members\' titles  --- Alternate route: `/dev/corporations/{corporation_id}/members/titles/`  Alternate route: `/v2/corporations/{corporation_id}/members/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation\'s members\' titles
     */
    async getCorporationsCorporationIdMembersTitles(requestParameters: GetCorporationsCorporationIdMembersTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdMembersTitles200Ok>> {
        const response = await this.getCorporationsCorporationIdMembersTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns additional information about a corporation\'s members which helps tracking their activities  --- Alternate route: `/dev/corporations/{corporation_id}/membertracking/`  Alternate route: `/v2/corporations/{corporation_id}/membertracking/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Track corporation members
     */
    async getCorporationsCorporationIdMembertrackingRaw(requestParameters: GetCorporationsCorporationIdMembertrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdMembertracking200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdMembertracking.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.track_members.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/membertracking/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdMembertracking200OkFromJSON));
    }

    /**
     * Returns additional information about a corporation\'s members which helps tracking their activities  --- Alternate route: `/dev/corporations/{corporation_id}/membertracking/`  Alternate route: `/v2/corporations/{corporation_id}/membertracking/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Track corporation members
     */
    async getCorporationsCorporationIdMembertracking(requestParameters: GetCorporationsCorporationIdMembertrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdMembertracking200Ok>> {
        const response = await this.getCorporationsCorporationIdMembertrackingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: `/dev/corporations/{corporation_id}/roles/`  Alternate route: `/v2/corporations/{corporation_id}/roles/`  --- This route is cached for up to 3600 seconds
     * Get corporation member roles
     */
    async getCorporationsCorporationIdRolesRaw(requestParameters: GetCorporationsCorporationIdRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdRoles200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_corporation_membership.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/roles/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdRoles200OkFromJSON));
    }

    /**
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: `/dev/corporations/{corporation_id}/roles/`  Alternate route: `/v2/corporations/{corporation_id}/roles/`  --- This route is cached for up to 3600 seconds
     * Get corporation member roles
     */
    async getCorporationsCorporationIdRoles(requestParameters: GetCorporationsCorporationIdRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdRoles200Ok>> {
        const response = await this.getCorporationsCorporationIdRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return how roles have changed for a coporation\'s members, up to a month  --- Alternate route: `/dev/corporations/{corporation_id}/roles/history/`  Alternate route: `/v2/corporations/{corporation_id}/roles/history/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation member roles history
     */
    async getCorporationsCorporationIdRolesHistoryRaw(requestParameters: GetCorporationsCorporationIdRolesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdRolesHistory200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdRolesHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_corporation_membership.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/roles/history/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdRolesHistory200OkFromJSON));
    }

    /**
     * Return how roles have changed for a coporation\'s members, up to a month  --- Alternate route: `/dev/corporations/{corporation_id}/roles/history/`  Alternate route: `/v2/corporations/{corporation_id}/roles/history/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation member roles history
     */
    async getCorporationsCorporationIdRolesHistory(requestParameters: GetCorporationsCorporationIdRolesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdRolesHistory200Ok>> {
        const response = await this.getCorporationsCorporationIdRolesHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the current shareholders of a corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/shareholders/`  Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`  Alternate route: `/v1/corporations/{corporation_id}/shareholders/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation shareholders
     */
    async getCorporationsCorporationIdShareholdersRaw(requestParameters: GetCorporationsCorporationIdShareholdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdShareholders200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdShareholders.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-wallet.read_corporation_wallets.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/shareholders/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdShareholders200OkFromJSON));
    }

    /**
     * Return the current shareholders of a corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/shareholders/`  Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`  Alternate route: `/v1/corporations/{corporation_id}/shareholders/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation shareholders
     */
    async getCorporationsCorporationIdShareholders(requestParameters: GetCorporationsCorporationIdShareholdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdShareholders200Ok>> {
        const response = await this.getCorporationsCorporationIdShareholdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/corporations/{corporation_id}/standings/`  Alternate route: `/v2/corporations/{corporation_id}/standings/`  --- This route is cached for up to 3600 seconds
     * Get corporation standings
     */
    async getCorporationsCorporationIdStandingsRaw(requestParameters: GetCorporationsCorporationIdStandingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdStandings200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdStandings.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_standings.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/standings/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdStandings200OkFromJSON));
    }

    /**
     * Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/corporations/{corporation_id}/standings/`  Alternate route: `/v2/corporations/{corporation_id}/standings/`  --- This route is cached for up to 3600 seconds
     * Get corporation standings
     */
    async getCorporationsCorporationIdStandings(requestParameters: GetCorporationsCorporationIdStandingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdStandings200Ok>> {
        const response = await this.getCorporationsCorporationIdStandingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of corporation starbases (POSes)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation starbases (POSes)
     */
    async getCorporationsCorporationIdStarbasesRaw(requestParameters: GetCorporationsCorporationIdStarbasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdStarbases200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdStarbases.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_starbases.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/starbases/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdStarbases200OkFromJSON));
    }

    /**
     * Returns list of corporation starbases (POSes)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation starbases (POSes)
     */
    async getCorporationsCorporationIdStarbases(requestParameters: GetCorporationsCorporationIdStarbasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdStarbases200Ok>> {
        const response = await this.getCorporationsCorporationIdStarbasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns various settings and fuels of a starbase (POS)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get starbase (POS) detail
     */
    async getCorporationsCorporationIdStarbasesStarbaseIdRaw(requestParameters: GetCorporationsCorporationIdStarbasesStarbaseIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdStarbasesStarbaseId.');
        }

        if (requestParameters.starbaseId === null || requestParameters.starbaseId === undefined) {
            throw new runtime.RequiredError('starbaseId','Required parameter requestParameters.starbaseId was null or undefined when calling getCorporationsCorporationIdStarbasesStarbaseId.');
        }

        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling getCorporationsCorporationIdStarbasesStarbaseId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.systemId !== undefined) {
            queryParameters['system_id'] = requestParameters.systemId;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_starbases.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/starbases/{starbase_id}/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))).replace(`{${"starbase_id"}}`, encodeURIComponent(String(requestParameters.starbaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCorporationsCorporationIdStarbasesStarbaseIdOkFromJSON(jsonValue));
    }

    /**
     * Returns various settings and fuels of a starbase (POS)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get starbase (POS) detail
     */
    async getCorporationsCorporationIdStarbasesStarbaseId(requestParameters: GetCorporationsCorporationIdStarbasesStarbaseIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCorporationsCorporationIdStarbasesStarbaseIdOk> {
        const response = await this.getCorporationsCorporationIdStarbasesStarbaseIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of corporation structures. This route\'s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  --- Alternate route: `/dev/corporations/{corporation_id}/structures/`  Alternate route: `/v4/corporations/{corporation_id}/structures/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager 
     * Get corporation structures
     */
    async getCorporationsCorporationIdStructuresRaw(requestParameters: GetCorporationsCorporationIdStructuresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdStructures200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdStructures.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_structures.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/structures/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdStructures200OkFromJSON));
    }

    /**
     * Get a list of corporation structures. This route\'s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  --- Alternate route: `/dev/corporations/{corporation_id}/structures/`  Alternate route: `/v4/corporations/{corporation_id}/structures/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager 
     * Get corporation structures
     */
    async getCorporationsCorporationIdStructures(requestParameters: GetCorporationsCorporationIdStructuresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdStructures200Ok>> {
        const response = await this.getCorporationsCorporationIdStructuresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a corporation\'s titles  --- Alternate route: `/dev/corporations/{corporation_id}/titles/`  Alternate route: `/v2/corporations/{corporation_id}/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation titles
     */
    async getCorporationsCorporationIdTitlesRaw(requestParameters: GetCorporationsCorporationIdTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdTitles200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-corporations.read_titles.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/titles/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdTitles200OkFromJSON));
    }

    /**
     * Returns a corporation\'s titles  --- Alternate route: `/dev/corporations/{corporation_id}/titles/`  Alternate route: `/v2/corporations/{corporation_id}/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * Get corporation titles
     */
    async getCorporationsCorporationIdTitles(requestParameters: GetCorporationsCorporationIdTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdTitles200Ok>> {
        const response = await this.getCorporationsCorporationIdTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of npc corporations  --- Alternate route: `/dev/corporations/npccorps/`  Alternate route: `/v2/corporations/npccorps/`  --- This route expires daily at 11:05
     * Get npc corporations
     */
    async getCorporationsNpccorpsRaw(requestParameters: GetCorporationsNpccorpsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/corporations/npccorps/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a list of npc corporations  --- Alternate route: `/dev/corporations/npccorps/`  Alternate route: `/v2/corporations/npccorps/`  --- This route expires daily at 11:05
     * Get npc corporations
     */
    async getCorporationsNpccorps(requestParameters: GetCorporationsNpccorpsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getCorporationsNpccorpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCorporationsCorporationIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdDatasourceEnum = typeof GetCorporationsCorporationIdDatasourceEnum[keyof typeof GetCorporationsCorporationIdDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdAlliancehistoryDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdAlliancehistoryDatasourceEnum = typeof GetCorporationsCorporationIdAlliancehistoryDatasourceEnum[keyof typeof GetCorporationsCorporationIdAlliancehistoryDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdBlueprintsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdBlueprintsDatasourceEnum = typeof GetCorporationsCorporationIdBlueprintsDatasourceEnum[keyof typeof GetCorporationsCorporationIdBlueprintsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdContainersLogsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdContainersLogsDatasourceEnum = typeof GetCorporationsCorporationIdContainersLogsDatasourceEnum[keyof typeof GetCorporationsCorporationIdContainersLogsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdDivisionsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdDivisionsDatasourceEnum = typeof GetCorporationsCorporationIdDivisionsDatasourceEnum[keyof typeof GetCorporationsCorporationIdDivisionsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdFacilitiesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdFacilitiesDatasourceEnum = typeof GetCorporationsCorporationIdFacilitiesDatasourceEnum[keyof typeof GetCorporationsCorporationIdFacilitiesDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdIconsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdIconsDatasourceEnum = typeof GetCorporationsCorporationIdIconsDatasourceEnum[keyof typeof GetCorporationsCorporationIdIconsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdMedalsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdMedalsDatasourceEnum = typeof GetCorporationsCorporationIdMedalsDatasourceEnum[keyof typeof GetCorporationsCorporationIdMedalsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdMedalsIssuedDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdMedalsIssuedDatasourceEnum = typeof GetCorporationsCorporationIdMedalsIssuedDatasourceEnum[keyof typeof GetCorporationsCorporationIdMedalsIssuedDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdMembersDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdMembersDatasourceEnum = typeof GetCorporationsCorporationIdMembersDatasourceEnum[keyof typeof GetCorporationsCorporationIdMembersDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdMembersLimitDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdMembersLimitDatasourceEnum = typeof GetCorporationsCorporationIdMembersLimitDatasourceEnum[keyof typeof GetCorporationsCorporationIdMembersLimitDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdMembersTitlesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdMembersTitlesDatasourceEnum = typeof GetCorporationsCorporationIdMembersTitlesDatasourceEnum[keyof typeof GetCorporationsCorporationIdMembersTitlesDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdMembertrackingDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdMembertrackingDatasourceEnum = typeof GetCorporationsCorporationIdMembertrackingDatasourceEnum[keyof typeof GetCorporationsCorporationIdMembertrackingDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdRolesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdRolesDatasourceEnum = typeof GetCorporationsCorporationIdRolesDatasourceEnum[keyof typeof GetCorporationsCorporationIdRolesDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdRolesHistoryDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdRolesHistoryDatasourceEnum = typeof GetCorporationsCorporationIdRolesHistoryDatasourceEnum[keyof typeof GetCorporationsCorporationIdRolesHistoryDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdShareholdersDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdShareholdersDatasourceEnum = typeof GetCorporationsCorporationIdShareholdersDatasourceEnum[keyof typeof GetCorporationsCorporationIdShareholdersDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdStandingsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdStandingsDatasourceEnum = typeof GetCorporationsCorporationIdStandingsDatasourceEnum[keyof typeof GetCorporationsCorporationIdStandingsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdStarbasesDatasourceEnum = typeof GetCorporationsCorporationIdStarbasesDatasourceEnum[keyof typeof GetCorporationsCorporationIdStarbasesDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdDatasourceEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdDatasourceEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdStructuresAcceptLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetCorporationsCorporationIdStructuresAcceptLanguageEnum = typeof GetCorporationsCorporationIdStructuresAcceptLanguageEnum[keyof typeof GetCorporationsCorporationIdStructuresAcceptLanguageEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdStructuresDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdStructuresDatasourceEnum = typeof GetCorporationsCorporationIdStructuresDatasourceEnum[keyof typeof GetCorporationsCorporationIdStructuresDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdStructuresLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetCorporationsCorporationIdStructuresLanguageEnum = typeof GetCorporationsCorporationIdStructuresLanguageEnum[keyof typeof GetCorporationsCorporationIdStructuresLanguageEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdTitlesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdTitlesDatasourceEnum = typeof GetCorporationsCorporationIdTitlesDatasourceEnum[keyof typeof GetCorporationsCorporationIdTitlesDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsNpccorpsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsNpccorpsDatasourceEnum = typeof GetCorporationsNpccorpsDatasourceEnum[keyof typeof GetCorporationsNpccorpsDatasourceEnum];
