/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdContracts200Ok,
  GetCharactersCharacterIdContractsContractIdBids200Ok,
  GetCharactersCharacterIdContractsContractIdBidsNotFound,
  GetCharactersCharacterIdContractsContractIdItems200Ok,
  GetCharactersCharacterIdContractsContractIdItemsNotFound,
  GetContractsPublicBidsContractId200Ok,
  GetContractsPublicBidsContractIdForbidden,
  GetContractsPublicBidsContractIdNotFound,
  GetContractsPublicItemsContractId200Ok,
  GetContractsPublicItemsContractIdForbidden,
  GetContractsPublicItemsContractIdNotFound,
  GetContractsPublicRegionId200Ok,
  GetContractsPublicRegionIdNotFound,
  GetCorporationsCorporationIdContracts200Ok,
  GetCorporationsCorporationIdContractsContractIdBids200Ok,
  GetCorporationsCorporationIdContractsContractIdBidsNotFound,
  GetCorporationsCorporationIdContractsContractIdItems200Ok,
  GetCorporationsCorporationIdContractsContractIdItemsError520,
  GetCorporationsCorporationIdContractsContractIdItemsNotFound,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdContracts200OkFromJSON,
    GetCharactersCharacterIdContracts200OkToJSON,
    GetCharactersCharacterIdContractsContractIdBids200OkFromJSON,
    GetCharactersCharacterIdContractsContractIdBids200OkToJSON,
    GetCharactersCharacterIdContractsContractIdBidsNotFoundFromJSON,
    GetCharactersCharacterIdContractsContractIdBidsNotFoundToJSON,
    GetCharactersCharacterIdContractsContractIdItems200OkFromJSON,
    GetCharactersCharacterIdContractsContractIdItems200OkToJSON,
    GetCharactersCharacterIdContractsContractIdItemsNotFoundFromJSON,
    GetCharactersCharacterIdContractsContractIdItemsNotFoundToJSON,
    GetContractsPublicBidsContractId200OkFromJSON,
    GetContractsPublicBidsContractId200OkToJSON,
    GetContractsPublicBidsContractIdForbiddenFromJSON,
    GetContractsPublicBidsContractIdForbiddenToJSON,
    GetContractsPublicBidsContractIdNotFoundFromJSON,
    GetContractsPublicBidsContractIdNotFoundToJSON,
    GetContractsPublicItemsContractId200OkFromJSON,
    GetContractsPublicItemsContractId200OkToJSON,
    GetContractsPublicItemsContractIdForbiddenFromJSON,
    GetContractsPublicItemsContractIdForbiddenToJSON,
    GetContractsPublicItemsContractIdNotFoundFromJSON,
    GetContractsPublicItemsContractIdNotFoundToJSON,
    GetContractsPublicRegionId200OkFromJSON,
    GetContractsPublicRegionId200OkToJSON,
    GetContractsPublicRegionIdNotFoundFromJSON,
    GetContractsPublicRegionIdNotFoundToJSON,
    GetCorporationsCorporationIdContracts200OkFromJSON,
    GetCorporationsCorporationIdContracts200OkToJSON,
    GetCorporationsCorporationIdContractsContractIdBids200OkFromJSON,
    GetCorporationsCorporationIdContractsContractIdBids200OkToJSON,
    GetCorporationsCorporationIdContractsContractIdBidsNotFoundFromJSON,
    GetCorporationsCorporationIdContractsContractIdBidsNotFoundToJSON,
    GetCorporationsCorporationIdContractsContractIdItems200OkFromJSON,
    GetCorporationsCorporationIdContractsContractIdItems200OkToJSON,
    GetCorporationsCorporationIdContractsContractIdItemsError520FromJSON,
    GetCorporationsCorporationIdContractsContractIdItemsError520ToJSON,
    GetCorporationsCorporationIdContractsContractIdItemsNotFoundFromJSON,
    GetCorporationsCorporationIdContractsContractIdItemsNotFoundToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdContractsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdContractsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCharactersCharacterIdContractsContractIdBidsRequest {
    characterId: number;
    contractId: number;
    datasource?: GetCharactersCharacterIdContractsContractIdBidsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdContractsContractIdItemsRequest {
    characterId: number;
    contractId: number;
    datasource?: GetCharactersCharacterIdContractsContractIdItemsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetContractsPublicBidsContractIdRequest {
    contractId: number;
    datasource?: GetContractsPublicBidsContractIdDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
}

export interface GetContractsPublicItemsContractIdRequest {
    contractId: number;
    datasource?: GetContractsPublicItemsContractIdDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
}

export interface GetContractsPublicRegionIdRequest {
    regionId: number;
    datasource?: GetContractsPublicRegionIdDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
}

export interface GetCorporationsCorporationIdContractsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdContractsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdContractsContractIdBidsRequest {
    contractId: number;
    corporationId: number;
    datasource?: GetCorporationsCorporationIdContractsContractIdBidsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdContractsContractIdItemsRequest {
    contractId: number;
    corporationId: number;
    datasource?: GetCorporationsCorporationIdContractsContractIdItemsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

/**
 * 
 */
export class ContractsApi extends runtime.BaseAPI {

    /**
     * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/characters/{character_id}/contracts/`  Alternate route: `/legacy/characters/{character_id}/contracts/`  Alternate route: `/v1/characters/{character_id}/contracts/`  --- This route is cached for up to 300 seconds
     * Get contracts
     */
    async getCharactersCharacterIdContractsRaw(requestParameters: GetCharactersCharacterIdContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdContracts200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdContracts.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-contracts.read_character_contracts.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/contracts/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdContracts200OkFromJSON));
    }

    /**
     * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/characters/{character_id}/contracts/`  Alternate route: `/legacy/characters/{character_id}/contracts/`  Alternate route: `/v1/characters/{character_id}/contracts/`  --- This route is cached for up to 300 seconds
     * Get contracts
     */
    async getCharactersCharacterIdContracts(requestParameters: GetCharactersCharacterIdContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdContracts200Ok>> {
        const response = await this.getCharactersCharacterIdContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists bids on a particular auction contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 300 seconds
     * Get contract bids
     */
    async getCharactersCharacterIdContractsContractIdBidsRaw(requestParameters: GetCharactersCharacterIdContractsContractIdBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdContractsContractIdBids200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdContractsContractIdBids.');
        }

        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getCharactersCharacterIdContractsContractIdBids.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-contracts.read_character_contracts.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/contracts/{contract_id}/bids/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))).replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdContractsContractIdBids200OkFromJSON));
    }

    /**
     * Lists bids on a particular auction contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 300 seconds
     * Get contract bids
     */
    async getCharactersCharacterIdContractsContractIdBids(requestParameters: GetCharactersCharacterIdContractsContractIdBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdContractsContractIdBids200Ok>> {
        const response = await this.getCharactersCharacterIdContractsContractIdBidsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists items of a particular contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
     * Get contract items
     */
    async getCharactersCharacterIdContractsContractIdItemsRaw(requestParameters: GetCharactersCharacterIdContractsContractIdItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdContractsContractIdItems200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdContractsContractIdItems.');
        }

        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getCharactersCharacterIdContractsContractIdItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-contracts.read_character_contracts.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/contracts/{contract_id}/items/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))).replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdContractsContractIdItems200OkFromJSON));
    }

    /**
     * Lists items of a particular contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
     * Get contract items
     */
    async getCharactersCharacterIdContractsContractIdItems(requestParameters: GetCharactersCharacterIdContractsContractIdItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdContractsContractIdItems200Ok>> {
        const response = await this.getCharactersCharacterIdContractsContractIdItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists bids on a public auction contract  --- Alternate route: `/dev/contracts/public/bids/{contract_id}/`  Alternate route: `/legacy/contracts/public/bids/{contract_id}/`  Alternate route: `/v1/contracts/public/bids/{contract_id}/`  --- This route is cached for up to 300 seconds
     * Get public contract bids
     */
    async getContractsPublicBidsContractIdRaw(requestParameters: GetContractsPublicBidsContractIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetContractsPublicBidsContractId200Ok>>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getContractsPublicBidsContractId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/contracts/public/bids/{contract_id}/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetContractsPublicBidsContractId200OkFromJSON));
    }

    /**
     * Lists bids on a public auction contract  --- Alternate route: `/dev/contracts/public/bids/{contract_id}/`  Alternate route: `/legacy/contracts/public/bids/{contract_id}/`  Alternate route: `/v1/contracts/public/bids/{contract_id}/`  --- This route is cached for up to 300 seconds
     * Get public contract bids
     */
    async getContractsPublicBidsContractId(requestParameters: GetContractsPublicBidsContractIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetContractsPublicBidsContractId200Ok>> {
        const response = await this.getContractsPublicBidsContractIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists items of a public contract  --- Alternate route: `/dev/contracts/public/items/{contract_id}/`  Alternate route: `/legacy/contracts/public/items/{contract_id}/`  Alternate route: `/v1/contracts/public/items/{contract_id}/`  --- This route is cached for up to 3600 seconds
     * Get public contract items
     */
    async getContractsPublicItemsContractIdRaw(requestParameters: GetContractsPublicItemsContractIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetContractsPublicItemsContractId200Ok>>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getContractsPublicItemsContractId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/contracts/public/items/{contract_id}/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetContractsPublicItemsContractId200OkFromJSON));
    }

    /**
     * Lists items of a public contract  --- Alternate route: `/dev/contracts/public/items/{contract_id}/`  Alternate route: `/legacy/contracts/public/items/{contract_id}/`  Alternate route: `/v1/contracts/public/items/{contract_id}/`  --- This route is cached for up to 3600 seconds
     * Get public contract items
     */
    async getContractsPublicItemsContractId(requestParameters: GetContractsPublicItemsContractIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetContractsPublicItemsContractId200Ok>> {
        const response = await this.getContractsPublicItemsContractIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of all public contracts in the given region  --- Alternate route: `/dev/contracts/public/{region_id}/`  Alternate route: `/legacy/contracts/public/{region_id}/`  Alternate route: `/v1/contracts/public/{region_id}/`  --- This route is cached for up to 1800 seconds
     * Get public contracts
     */
    async getContractsPublicRegionIdRaw(requestParameters: GetContractsPublicRegionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetContractsPublicRegionId200Ok>>> {
        if (requestParameters.regionId === null || requestParameters.regionId === undefined) {
            throw new runtime.RequiredError('regionId','Required parameter requestParameters.regionId was null or undefined when calling getContractsPublicRegionId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/contracts/public/{region_id}/`.replace(`{${"region_id"}}`, encodeURIComponent(String(requestParameters.regionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetContractsPublicRegionId200OkFromJSON));
    }

    /**
     * Returns a paginated list of all public contracts in the given region  --- Alternate route: `/dev/contracts/public/{region_id}/`  Alternate route: `/legacy/contracts/public/{region_id}/`  Alternate route: `/v1/contracts/public/{region_id}/`  --- This route is cached for up to 1800 seconds
     * Get public contracts
     */
    async getContractsPublicRegionId(requestParameters: GetContractsPublicRegionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetContractsPublicRegionId200Ok>> {
        const response = await this.getContractsPublicRegionIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/`  --- This route is cached for up to 300 seconds
     * Get corporation contracts
     */
    async getCorporationsCorporationIdContractsRaw(requestParameters: GetCorporationsCorporationIdContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdContracts200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdContracts.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-contracts.read_corporation_contracts.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/contracts/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdContracts200OkFromJSON));
    }

    /**
     * Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/`  --- This route is cached for up to 300 seconds
     * Get corporation contracts
     */
    async getCorporationsCorporationIdContracts(requestParameters: GetCorporationsCorporationIdContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdContracts200Ok>> {
        const response = await this.getCorporationsCorporationIdContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists bids on a particular auction contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 3600 seconds
     * Get corporation contract bids
     */
    async getCorporationsCorporationIdContractsContractIdBidsRaw(requestParameters: GetCorporationsCorporationIdContractsContractIdBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdContractsContractIdBids200Ok>>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getCorporationsCorporationIdContractsContractIdBids.');
        }

        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdContractsContractIdBids.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-contracts.read_corporation_contracts.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/contracts/{contract_id}/bids/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))).replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdContractsContractIdBids200OkFromJSON));
    }

    /**
     * Lists bids on a particular auction contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 3600 seconds
     * Get corporation contract bids
     */
    async getCorporationsCorporationIdContractsContractIdBids(requestParameters: GetCorporationsCorporationIdContractsContractIdBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdContractsContractIdBids200Ok>> {
        const response = await this.getCorporationsCorporationIdContractsContractIdBidsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists items of a particular contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
     * Get corporation contract items
     */
    async getCorporationsCorporationIdContractsContractIdItemsRaw(requestParameters: GetCorporationsCorporationIdContractsContractIdItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdContractsContractIdItems200Ok>>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getCorporationsCorporationIdContractsContractIdItems.');
        }

        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdContractsContractIdItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-contracts.read_corporation_contracts.v1"]);
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/contracts/{contract_id}/items/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))).replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdContractsContractIdItems200OkFromJSON));
    }

    /**
     * Lists items of a particular contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
     * Get corporation contract items
     */
    async getCorporationsCorporationIdContractsContractIdItems(requestParameters: GetCorporationsCorporationIdContractsContractIdItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCorporationsCorporationIdContractsContractIdItems200Ok>> {
        const response = await this.getCorporationsCorporationIdContractsContractIdItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdContractsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdContractsDatasourceEnum = typeof GetCharactersCharacterIdContractsDatasourceEnum[keyof typeof GetCharactersCharacterIdContractsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdContractsContractIdBidsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdContractsContractIdBidsDatasourceEnum = typeof GetCharactersCharacterIdContractsContractIdBidsDatasourceEnum[keyof typeof GetCharactersCharacterIdContractsContractIdBidsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdContractsContractIdItemsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdContractsContractIdItemsDatasourceEnum = typeof GetCharactersCharacterIdContractsContractIdItemsDatasourceEnum[keyof typeof GetCharactersCharacterIdContractsContractIdItemsDatasourceEnum];
/**
 * @export
 */
export const GetContractsPublicBidsContractIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetContractsPublicBidsContractIdDatasourceEnum = typeof GetContractsPublicBidsContractIdDatasourceEnum[keyof typeof GetContractsPublicBidsContractIdDatasourceEnum];
/**
 * @export
 */
export const GetContractsPublicItemsContractIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetContractsPublicItemsContractIdDatasourceEnum = typeof GetContractsPublicItemsContractIdDatasourceEnum[keyof typeof GetContractsPublicItemsContractIdDatasourceEnum];
/**
 * @export
 */
export const GetContractsPublicRegionIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetContractsPublicRegionIdDatasourceEnum = typeof GetContractsPublicRegionIdDatasourceEnum[keyof typeof GetContractsPublicRegionIdDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdContractsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdContractsDatasourceEnum = typeof GetCorporationsCorporationIdContractsDatasourceEnum[keyof typeof GetCorporationsCorporationIdContractsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdContractsContractIdBidsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdContractsContractIdBidsDatasourceEnum = typeof GetCorporationsCorporationIdContractsContractIdBidsDatasourceEnum[keyof typeof GetCorporationsCorporationIdContractsContractIdBidsDatasourceEnum];
/**
 * @export
 */
export const GetCorporationsCorporationIdContractsContractIdItemsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCorporationsCorporationIdContractsContractIdItemsDatasourceEnum = typeof GetCorporationsCorporationIdContractsContractIdItemsDatasourceEnum[keyof typeof GetCorporationsCorporationIdContractsContractIdItemsDatasourceEnum];
