/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  GatewayTimeout,
  GetAlliancesAllianceIdIconsNotFound,
  GetAlliancesAllianceIdIconsOk,
  GetAlliancesAllianceIdNotFound,
  GetAlliancesAllianceIdOk,
  InternalServerError,
  ServiceUnavailable,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetAlliancesAllianceIdIconsNotFoundFromJSON,
    GetAlliancesAllianceIdIconsNotFoundToJSON,
    GetAlliancesAllianceIdIconsOkFromJSON,
    GetAlliancesAllianceIdIconsOkToJSON,
    GetAlliancesAllianceIdNotFoundFromJSON,
    GetAlliancesAllianceIdNotFoundToJSON,
    GetAlliancesAllianceIdOkFromJSON,
    GetAlliancesAllianceIdOkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
} from '../models';

export interface GetAlliancesRequest {
    datasource?: GetAlliancesDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetAlliancesAllianceIdRequest {
    allianceId: number;
    datasource?: GetAlliancesAllianceIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetAlliancesAllianceIdCorporationsRequest {
    allianceId: number;
    datasource?: GetAlliancesAllianceIdCorporationsDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetAlliancesAllianceIdIconsRequest {
    allianceId: number;
    datasource?: GetAlliancesAllianceIdIconsDatasourceEnum;
    ifNoneMatch?: string;
}

/**
 * 
 */
export class AllianceApi extends runtime.BaseAPI {

    /**
     * List all active player alliances  --- Alternate route: `/dev/alliances/`  Alternate route: `/legacy/alliances/`  Alternate route: `/v1/alliances/`  Alternate route: `/v2/alliances/`  --- This route is cached for up to 3600 seconds
     * List all alliances
     */
    async getAlliancesRaw(requestParameters: GetAlliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/alliances/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all active player alliances  --- Alternate route: `/dev/alliances/`  Alternate route: `/legacy/alliances/`  Alternate route: `/v1/alliances/`  Alternate route: `/v2/alliances/`  --- This route is cached for up to 3600 seconds
     * List all alliances
     */
    async getAlliances(requestParameters: GetAlliancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAlliancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Public information about an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/`  Alternate route: `/legacy/alliances/{alliance_id}/`  Alternate route: `/v3/alliances/{alliance_id}/`  Alternate route: `/v4/alliances/{alliance_id}/`  --- This route is cached for up to 3600 seconds
     * Get alliance information
     */
    async getAlliancesAllianceIdRaw(requestParameters: GetAlliancesAllianceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAlliancesAllianceIdOk>> {
        if (requestParameters.allianceId === null || requestParameters.allianceId === undefined) {
            throw new runtime.RequiredError('allianceId','Required parameter requestParameters.allianceId was null or undefined when calling getAlliancesAllianceId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/alliances/{alliance_id}/`.replace(`{${"alliance_id"}}`, encodeURIComponent(String(requestParameters.allianceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAlliancesAllianceIdOkFromJSON(jsonValue));
    }

    /**
     * Public information about an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/`  Alternate route: `/legacy/alliances/{alliance_id}/`  Alternate route: `/v3/alliances/{alliance_id}/`  Alternate route: `/v4/alliances/{alliance_id}/`  --- This route is cached for up to 3600 seconds
     * Get alliance information
     */
    async getAlliancesAllianceId(requestParameters: GetAlliancesAllianceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAlliancesAllianceIdOk> {
        const response = await this.getAlliancesAllianceIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all current member corporations of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/corporations/`  Alternate route: `/legacy/alliances/{alliance_id}/corporations/`  Alternate route: `/v1/alliances/{alliance_id}/corporations/`  Alternate route: `/v2/alliances/{alliance_id}/corporations/`  --- This route is cached for up to 3600 seconds
     * List alliance\'s corporations
     */
    async getAlliancesAllianceIdCorporationsRaw(requestParameters: GetAlliancesAllianceIdCorporationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        if (requestParameters.allianceId === null || requestParameters.allianceId === undefined) {
            throw new runtime.RequiredError('allianceId','Required parameter requestParameters.allianceId was null or undefined when calling getAlliancesAllianceIdCorporations.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/alliances/{alliance_id}/corporations/`.replace(`{${"alliance_id"}}`, encodeURIComponent(String(requestParameters.allianceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all current member corporations of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/corporations/`  Alternate route: `/legacy/alliances/{alliance_id}/corporations/`  Alternate route: `/v1/alliances/{alliance_id}/corporations/`  Alternate route: `/v2/alliances/{alliance_id}/corporations/`  --- This route is cached for up to 3600 seconds
     * List alliance\'s corporations
     */
    async getAlliancesAllianceIdCorporations(requestParameters: GetAlliancesAllianceIdCorporationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAlliancesAllianceIdCorporationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the icon urls for a alliance  --- Alternate route: `/legacy/alliances/{alliance_id}/icons/`  Alternate route: `/v1/alliances/{alliance_id}/icons/`  --- This route expires daily at 11:05  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/icons/)
     * Get alliance icon
     */
    async getAlliancesAllianceIdIconsRaw(requestParameters: GetAlliancesAllianceIdIconsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAlliancesAllianceIdIconsOk>> {
        if (requestParameters.allianceId === null || requestParameters.allianceId === undefined) {
            throw new runtime.RequiredError('allianceId','Required parameter requestParameters.allianceId was null or undefined when calling getAlliancesAllianceIdIcons.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/alliances/{alliance_id}/icons/`.replace(`{${"alliance_id"}}`, encodeURIComponent(String(requestParameters.allianceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAlliancesAllianceIdIconsOkFromJSON(jsonValue));
    }

    /**
     * Get the icon urls for a alliance  --- Alternate route: `/legacy/alliances/{alliance_id}/icons/`  Alternate route: `/v1/alliances/{alliance_id}/icons/`  --- This route expires daily at 11:05  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/icons/)
     * Get alliance icon
     */
    async getAlliancesAllianceIdIcons(requestParameters: GetAlliancesAllianceIdIconsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAlliancesAllianceIdIconsOk> {
        const response = await this.getAlliancesAllianceIdIconsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAlliancesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetAlliancesDatasourceEnum = typeof GetAlliancesDatasourceEnum[keyof typeof GetAlliancesDatasourceEnum];
/**
 * @export
 */
export const GetAlliancesAllianceIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetAlliancesAllianceIdDatasourceEnum = typeof GetAlliancesAllianceIdDatasourceEnum[keyof typeof GetAlliancesAllianceIdDatasourceEnum];
/**
 * @export
 */
export const GetAlliancesAllianceIdCorporationsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetAlliancesAllianceIdCorporationsDatasourceEnum = typeof GetAlliancesAllianceIdCorporationsDatasourceEnum[keyof typeof GetAlliancesAllianceIdCorporationsDatasourceEnum];
/**
 * @export
 */
export const GetAlliancesAllianceIdIconsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetAlliancesAllianceIdIconsDatasourceEnum = typeof GetAlliancesAllianceIdIconsDatasourceEnum[keyof typeof GetAlliancesAllianceIdIconsDatasourceEnum];
