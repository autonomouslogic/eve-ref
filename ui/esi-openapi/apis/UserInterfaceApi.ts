/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  InternalServerError,
  PostUiOpenwindowNewmailNewMail,
  PostUiOpenwindowNewmailUnprocessableEntity,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    PostUiOpenwindowNewmailNewMailFromJSON,
    PostUiOpenwindowNewmailNewMailToJSON,
    PostUiOpenwindowNewmailUnprocessableEntityFromJSON,
    PostUiOpenwindowNewmailUnprocessableEntityToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface PostUiAutopilotWaypointRequest {
    addToBeginning: boolean;
    clearOtherWaypoints: boolean;
    destinationId: number;
    datasource?: PostUiAutopilotWaypointDatasourceEnum;
    token?: string;
}

export interface PostUiOpenwindowContractRequest {
    contractId: number;
    datasource?: PostUiOpenwindowContractDatasourceEnum;
    token?: string;
}

export interface PostUiOpenwindowInformationRequest {
    targetId: number;
    datasource?: PostUiOpenwindowInformationDatasourceEnum;
    token?: string;
}

export interface PostUiOpenwindowMarketdetailsRequest {
    typeId: number;
    datasource?: PostUiOpenwindowMarketdetailsDatasourceEnum;
    token?: string;
}

export interface PostUiOpenwindowNewmailRequest {
    newMail: PostUiOpenwindowNewmailNewMail;
    datasource?: PostUiOpenwindowNewmailDatasourceEnum;
    token?: string;
}

/**
 * 
 */
export class UserInterfaceApi extends runtime.BaseAPI {

    /**
     * Set a solar system as autopilot waypoint  --- Alternate route: `/dev/ui/autopilot/waypoint/`  Alternate route: `/legacy/ui/autopilot/waypoint/`  Alternate route: `/v2/ui/autopilot/waypoint/` 
     * Set Autopilot Waypoint
     */
    async postUiAutopilotWaypointRaw(requestParameters: PostUiAutopilotWaypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addToBeginning === null || requestParameters.addToBeginning === undefined) {
            throw new runtime.RequiredError('addToBeginning','Required parameter requestParameters.addToBeginning was null or undefined when calling postUiAutopilotWaypoint.');
        }

        if (requestParameters.clearOtherWaypoints === null || requestParameters.clearOtherWaypoints === undefined) {
            throw new runtime.RequiredError('clearOtherWaypoints','Required parameter requestParameters.clearOtherWaypoints was null or undefined when calling postUiAutopilotWaypoint.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling postUiAutopilotWaypoint.');
        }

        const queryParameters: any = {};

        if (requestParameters.addToBeginning !== undefined) {
            queryParameters['add_to_beginning'] = requestParameters.addToBeginning;
        }

        if (requestParameters.clearOtherWaypoints !== undefined) {
            queryParameters['clear_other_waypoints'] = requestParameters.clearOtherWaypoints;
        }

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.destinationId !== undefined) {
            queryParameters['destination_id'] = requestParameters.destinationId;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-ui.write_waypoint.v1"]);
        }

        const response = await this.request({
            path: `/ui/autopilot/waypoint/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set a solar system as autopilot waypoint  --- Alternate route: `/dev/ui/autopilot/waypoint/`  Alternate route: `/legacy/ui/autopilot/waypoint/`  Alternate route: `/v2/ui/autopilot/waypoint/` 
     * Set Autopilot Waypoint
     */
    async postUiAutopilotWaypoint(requestParameters: PostUiAutopilotWaypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUiAutopilotWaypointRaw(requestParameters, initOverrides);
    }

    /**
     * Open the contract window inside the client  --- Alternate route: `/dev/ui/openwindow/contract/`  Alternate route: `/legacy/ui/openwindow/contract/`  Alternate route: `/v1/ui/openwindow/contract/` 
     * Open Contract Window
     */
    async postUiOpenwindowContractRaw(requestParameters: PostUiOpenwindowContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling postUiOpenwindowContract.');
        }

        const queryParameters: any = {};

        if (requestParameters.contractId !== undefined) {
            queryParameters['contract_id'] = requestParameters.contractId;
        }

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-ui.open_window.v1"]);
        }

        const response = await this.request({
            path: `/ui/openwindow/contract/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Open the contract window inside the client  --- Alternate route: `/dev/ui/openwindow/contract/`  Alternate route: `/legacy/ui/openwindow/contract/`  Alternate route: `/v1/ui/openwindow/contract/` 
     * Open Contract Window
     */
    async postUiOpenwindowContract(requestParameters: PostUiOpenwindowContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUiOpenwindowContractRaw(requestParameters, initOverrides);
    }

    /**
     * Open the information window for a character, corporation or alliance inside the client  --- Alternate route: `/dev/ui/openwindow/information/`  Alternate route: `/legacy/ui/openwindow/information/`  Alternate route: `/v1/ui/openwindow/information/` 
     * Open Information Window
     */
    async postUiOpenwindowInformationRaw(requestParameters: PostUiOpenwindowInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.targetId === null || requestParameters.targetId === undefined) {
            throw new runtime.RequiredError('targetId','Required parameter requestParameters.targetId was null or undefined when calling postUiOpenwindowInformation.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.targetId !== undefined) {
            queryParameters['target_id'] = requestParameters.targetId;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-ui.open_window.v1"]);
        }

        const response = await this.request({
            path: `/ui/openwindow/information/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Open the information window for a character, corporation or alliance inside the client  --- Alternate route: `/dev/ui/openwindow/information/`  Alternate route: `/legacy/ui/openwindow/information/`  Alternate route: `/v1/ui/openwindow/information/` 
     * Open Information Window
     */
    async postUiOpenwindowInformation(requestParameters: PostUiOpenwindowInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUiOpenwindowInformationRaw(requestParameters, initOverrides);
    }

    /**
     * Open the market details window for a specific typeID inside the client  --- Alternate route: `/dev/ui/openwindow/marketdetails/`  Alternate route: `/legacy/ui/openwindow/marketdetails/`  Alternate route: `/v1/ui/openwindow/marketdetails/` 
     * Open Market Details
     */
    async postUiOpenwindowMarketdetailsRaw(requestParameters: PostUiOpenwindowMarketdetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling postUiOpenwindowMarketdetails.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.typeId !== undefined) {
            queryParameters['type_id'] = requestParameters.typeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-ui.open_window.v1"]);
        }

        const response = await this.request({
            path: `/ui/openwindow/marketdetails/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Open the market details window for a specific typeID inside the client  --- Alternate route: `/dev/ui/openwindow/marketdetails/`  Alternate route: `/legacy/ui/openwindow/marketdetails/`  Alternate route: `/v1/ui/openwindow/marketdetails/` 
     * Open Market Details
     */
    async postUiOpenwindowMarketdetails(requestParameters: PostUiOpenwindowMarketdetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUiOpenwindowMarketdetailsRaw(requestParameters, initOverrides);
    }

    /**
     * Open the New Mail window, according to settings from the request if applicable  --- Alternate route: `/dev/ui/openwindow/newmail/`  Alternate route: `/legacy/ui/openwindow/newmail/`  Alternate route: `/v1/ui/openwindow/newmail/` 
     * Open New Mail Window
     */
    async postUiOpenwindowNewmailRaw(requestParameters: PostUiOpenwindowNewmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.newMail === null || requestParameters.newMail === undefined) {
            throw new runtime.RequiredError('newMail','Required parameter requestParameters.newMail was null or undefined when calling postUiOpenwindowNewmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-ui.open_window.v1"]);
        }

        const response = await this.request({
            path: `/ui/openwindow/newmail/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUiOpenwindowNewmailNewMailToJSON(requestParameters.newMail),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Open the New Mail window, according to settings from the request if applicable  --- Alternate route: `/dev/ui/openwindow/newmail/`  Alternate route: `/legacy/ui/openwindow/newmail/`  Alternate route: `/v1/ui/openwindow/newmail/` 
     * Open New Mail Window
     */
    async postUiOpenwindowNewmail(requestParameters: PostUiOpenwindowNewmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUiOpenwindowNewmailRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PostUiAutopilotWaypointDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostUiAutopilotWaypointDatasourceEnum = typeof PostUiAutopilotWaypointDatasourceEnum[keyof typeof PostUiAutopilotWaypointDatasourceEnum];
/**
 * @export
 */
export const PostUiOpenwindowContractDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostUiOpenwindowContractDatasourceEnum = typeof PostUiOpenwindowContractDatasourceEnum[keyof typeof PostUiOpenwindowContractDatasourceEnum];
/**
 * @export
 */
export const PostUiOpenwindowInformationDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostUiOpenwindowInformationDatasourceEnum = typeof PostUiOpenwindowInformationDatasourceEnum[keyof typeof PostUiOpenwindowInformationDatasourceEnum];
/**
 * @export
 */
export const PostUiOpenwindowMarketdetailsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostUiOpenwindowMarketdetailsDatasourceEnum = typeof PostUiOpenwindowMarketdetailsDatasourceEnum[keyof typeof PostUiOpenwindowMarketdetailsDatasourceEnum];
/**
 * @export
 */
export const PostUiOpenwindowNewmailDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostUiOpenwindowNewmailDatasourceEnum = typeof PostUiOpenwindowNewmailDatasourceEnum[keyof typeof PostUiOpenwindowNewmailDatasourceEnum];
