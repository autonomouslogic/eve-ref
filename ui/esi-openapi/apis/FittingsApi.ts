/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdFittings200Ok,
  InternalServerError,
  PostCharactersCharacterIdFittingsCreated,
  PostCharactersCharacterIdFittingsFitting,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdFittings200OkFromJSON,
    GetCharactersCharacterIdFittings200OkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    PostCharactersCharacterIdFittingsCreatedFromJSON,
    PostCharactersCharacterIdFittingsCreatedToJSON,
    PostCharactersCharacterIdFittingsFittingFromJSON,
    PostCharactersCharacterIdFittingsFittingToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface DeleteCharactersCharacterIdFittingsFittingIdRequest {
    characterId: number;
    fittingId: number;
    datasource?: DeleteCharactersCharacterIdFittingsFittingIdDatasourceEnum;
    token?: string;
}

export interface GetCharactersCharacterIdFittingsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdFittingsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface PostCharactersCharacterIdFittingsRequest {
    characterId: number;
    fitting: PostCharactersCharacterIdFittingsFitting;
    datasource?: PostCharactersCharacterIdFittingsDatasourceEnum;
    token?: string;
}

/**
 * 
 */
export class FittingsApi extends runtime.BaseAPI {

    /**
     * Delete a fitting from a character  --- Alternate route: `/dev/characters/{character_id}/fittings/{fitting_id}/`  Alternate route: `/legacy/characters/{character_id}/fittings/{fitting_id}/`  Alternate route: `/v1/characters/{character_id}/fittings/{fitting_id}/` 
     * Delete fitting
     */
    async deleteCharactersCharacterIdFittingsFittingIdRaw(requestParameters: DeleteCharactersCharacterIdFittingsFittingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling deleteCharactersCharacterIdFittingsFittingId.');
        }

        if (requestParameters.fittingId === null || requestParameters.fittingId === undefined) {
            throw new runtime.RequiredError('fittingId','Required parameter requestParameters.fittingId was null or undefined when calling deleteCharactersCharacterIdFittingsFittingId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-fittings.write_fittings.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/fittings/{fitting_id}/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))).replace(`{${"fitting_id"}}`, encodeURIComponent(String(requestParameters.fittingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fitting from a character  --- Alternate route: `/dev/characters/{character_id}/fittings/{fitting_id}/`  Alternate route: `/legacy/characters/{character_id}/fittings/{fitting_id}/`  Alternate route: `/v1/characters/{character_id}/fittings/{fitting_id}/` 
     * Delete fitting
     */
    async deleteCharactersCharacterIdFittingsFittingId(requestParameters: DeleteCharactersCharacterIdFittingsFittingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCharactersCharacterIdFittingsFittingIdRaw(requestParameters, initOverrides);
    }

    /**
     * Return fittings of a character  --- Alternate route: `/dev/characters/{character_id}/fittings/`  Alternate route: `/v2/characters/{character_id}/fittings/`  --- This route is cached for up to 300 seconds
     * Get fittings
     */
    async getCharactersCharacterIdFittingsRaw(requestParameters: GetCharactersCharacterIdFittingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdFittings200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdFittings.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-fittings.read_fittings.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/fittings/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdFittings200OkFromJSON));
    }

    /**
     * Return fittings of a character  --- Alternate route: `/dev/characters/{character_id}/fittings/`  Alternate route: `/v2/characters/{character_id}/fittings/`  --- This route is cached for up to 300 seconds
     * Get fittings
     */
    async getCharactersCharacterIdFittings(requestParameters: GetCharactersCharacterIdFittingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdFittings200Ok>> {
        const response = await this.getCharactersCharacterIdFittingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a new fitting for a character  --- Alternate route: `/dev/characters/{character_id}/fittings/`  Alternate route: `/v2/characters/{character_id}/fittings/` 
     * Create fitting
     */
    async postCharactersCharacterIdFittingsRaw(requestParameters: PostCharactersCharacterIdFittingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCharactersCharacterIdFittingsCreated>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling postCharactersCharacterIdFittings.');
        }

        if (requestParameters.fitting === null || requestParameters.fitting === undefined) {
            throw new runtime.RequiredError('fitting','Required parameter requestParameters.fitting was null or undefined when calling postCharactersCharacterIdFittings.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-fittings.write_fittings.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/fittings/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCharactersCharacterIdFittingsFittingToJSON(requestParameters.fitting),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCharactersCharacterIdFittingsCreatedFromJSON(jsonValue));
    }

    /**
     * Save a new fitting for a character  --- Alternate route: `/dev/characters/{character_id}/fittings/`  Alternate route: `/v2/characters/{character_id}/fittings/` 
     * Create fitting
     */
    async postCharactersCharacterIdFittings(requestParameters: PostCharactersCharacterIdFittingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCharactersCharacterIdFittingsCreated> {
        const response = await this.postCharactersCharacterIdFittingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteCharactersCharacterIdFittingsFittingIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type DeleteCharactersCharacterIdFittingsFittingIdDatasourceEnum = typeof DeleteCharactersCharacterIdFittingsFittingIdDatasourceEnum[keyof typeof DeleteCharactersCharacterIdFittingsFittingIdDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdFittingsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdFittingsDatasourceEnum = typeof GetCharactersCharacterIdFittingsDatasourceEnum[keyof typeof GetCharactersCharacterIdFittingsDatasourceEnum];
/**
 * @export
 */
export const PostCharactersCharacterIdFittingsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostCharactersCharacterIdFittingsDatasourceEnum = typeof PostCharactersCharacterIdFittingsDatasourceEnum[keyof typeof PostCharactersCharacterIdFittingsDatasourceEnum];
