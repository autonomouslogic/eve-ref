/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdAgentsResearch200Ok,
  GetCharactersCharacterIdBlueprints200Ok,
  GetCharactersCharacterIdCorporationhistory200Ok,
  GetCharactersCharacterIdFatigueOk,
  GetCharactersCharacterIdMedals200Ok,
  GetCharactersCharacterIdNotFound,
  GetCharactersCharacterIdNotifications200Ok,
  GetCharactersCharacterIdNotificationsContacts200Ok,
  GetCharactersCharacterIdOk,
  GetCharactersCharacterIdPortraitNotFound,
  GetCharactersCharacterIdPortraitOk,
  GetCharactersCharacterIdRolesOk,
  GetCharactersCharacterIdStandings200Ok,
  GetCharactersCharacterIdTitles200Ok,
  InternalServerError,
  PostCharactersAffiliation200Ok,
  ServiceUnavailable,
  Unauthorized,
} from '../models';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdAgentsResearch200OkFromJSON,
    GetCharactersCharacterIdAgentsResearch200OkToJSON,
    GetCharactersCharacterIdBlueprints200OkFromJSON,
    GetCharactersCharacterIdBlueprints200OkToJSON,
    GetCharactersCharacterIdCorporationhistory200OkFromJSON,
    GetCharactersCharacterIdCorporationhistory200OkToJSON,
    GetCharactersCharacterIdFatigueOkFromJSON,
    GetCharactersCharacterIdFatigueOkToJSON,
    GetCharactersCharacterIdMedals200OkFromJSON,
    GetCharactersCharacterIdMedals200OkToJSON,
    GetCharactersCharacterIdNotFoundFromJSON,
    GetCharactersCharacterIdNotFoundToJSON,
    GetCharactersCharacterIdNotifications200OkFromJSON,
    GetCharactersCharacterIdNotifications200OkToJSON,
    GetCharactersCharacterIdNotificationsContacts200OkFromJSON,
    GetCharactersCharacterIdNotificationsContacts200OkToJSON,
    GetCharactersCharacterIdOkFromJSON,
    GetCharactersCharacterIdOkToJSON,
    GetCharactersCharacterIdPortraitNotFoundFromJSON,
    GetCharactersCharacterIdPortraitNotFoundToJSON,
    GetCharactersCharacterIdPortraitOkFromJSON,
    GetCharactersCharacterIdPortraitOkToJSON,
    GetCharactersCharacterIdRolesOkFromJSON,
    GetCharactersCharacterIdRolesOkToJSON,
    GetCharactersCharacterIdStandings200OkFromJSON,
    GetCharactersCharacterIdStandings200OkToJSON,
    GetCharactersCharacterIdTitles200OkFromJSON,
    GetCharactersCharacterIdTitles200OkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    PostCharactersAffiliation200OkFromJSON,
    PostCharactersAffiliation200OkToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCharactersCharacterIdAgentsResearchRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdAgentsResearchDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdBlueprintsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdBlueprintsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCharactersCharacterIdCorporationhistoryRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdCorporationhistoryDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCharactersCharacterIdFatigueRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdFatigueDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdMedalsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdMedalsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdNotificationsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdNotificationsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdNotificationsContactsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdNotificationsContactsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdPortraitRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdPortraitDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCharactersCharacterIdRolesRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdRolesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdStandingsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdStandingsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdTitlesRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdTitlesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface PostCharactersAffiliationRequest {
    characters: Set<number>;
    datasource?: PostCharactersAffiliationDatasourceEnum;
}

export interface PostCharactersCharacterIdCspaRequest {
    characterId: number;
    characters: Set<number>;
    datasource?: PostCharactersCharacterIdCspaDatasourceEnum;
    token?: string;
}

/**
 * 
 */
export class CharacterApi extends runtime.BaseAPI {

    /**
     * Public information about a character  --- Alternate route: `/dev/characters/{character_id}/`  Alternate route: `/legacy/characters/{character_id}/`  Alternate route: `/v5/characters/{character_id}/`  --- This route is cached for up to 604800 seconds
     * Get character\'s public information
     */
    async getCharactersCharacterIdRaw(requestParameters: GetCharactersCharacterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterId.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/characters/{character_id}/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdOkFromJSON(jsonValue));
    }

    /**
     * Public information about a character  --- Alternate route: `/dev/characters/{character_id}/`  Alternate route: `/legacy/characters/{character_id}/`  Alternate route: `/v5/characters/{character_id}/`  --- This route is cached for up to 604800 seconds
     * Get character\'s public information
     */
    async getCharactersCharacterId(requestParameters: GetCharactersCharacterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdOk> {
        const response = await this.getCharactersCharacterIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: `/dev/characters/{character_id}/agents_research/`  Alternate route: `/v2/characters/{character_id}/agents_research/`  --- This route is cached for up to 3600 seconds
     * Get agents research
     */
    async getCharactersCharacterIdAgentsResearchRaw(requestParameters: GetCharactersCharacterIdAgentsResearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdAgentsResearch200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdAgentsResearch.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_agents_research.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/agents_research/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdAgentsResearch200OkFromJSON));
    }

    /**
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: `/dev/characters/{character_id}/agents_research/`  Alternate route: `/v2/characters/{character_id}/agents_research/`  --- This route is cached for up to 3600 seconds
     * Get agents research
     */
    async getCharactersCharacterIdAgentsResearch(requestParameters: GetCharactersCharacterIdAgentsResearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdAgentsResearch200Ok>> {
        const response = await this.getCharactersCharacterIdAgentsResearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of blueprints the character owns  --- Alternate route: `/dev/characters/{character_id}/blueprints/`  Alternate route: `/v3/characters/{character_id}/blueprints/`  --- This route is cached for up to 3600 seconds
     * Get blueprints
     */
    async getCharactersCharacterIdBlueprintsRaw(requestParameters: GetCharactersCharacterIdBlueprintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdBlueprints200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdBlueprints.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_blueprints.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/blueprints/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdBlueprints200OkFromJSON));
    }

    /**
     * Return a list of blueprints the character owns  --- Alternate route: `/dev/characters/{character_id}/blueprints/`  Alternate route: `/v3/characters/{character_id}/blueprints/`  --- This route is cached for up to 3600 seconds
     * Get blueprints
     */
    async getCharactersCharacterIdBlueprints(requestParameters: GetCharactersCharacterIdBlueprintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdBlueprints200Ok>> {
        const response = await this.getCharactersCharacterIdBlueprintsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all the corporations a character has been a member of  --- Alternate route: `/dev/characters/{character_id}/corporationhistory/`  Alternate route: `/v2/characters/{character_id}/corporationhistory/`  --- This route is cached for up to 86400 seconds
     * Get corporation history
     */
    async getCharactersCharacterIdCorporationhistoryRaw(requestParameters: GetCharactersCharacterIdCorporationhistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdCorporationhistory200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdCorporationhistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/characters/{character_id}/corporationhistory/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdCorporationhistory200OkFromJSON));
    }

    /**
     * Get a list of all the corporations a character has been a member of  --- Alternate route: `/dev/characters/{character_id}/corporationhistory/`  Alternate route: `/v2/characters/{character_id}/corporationhistory/`  --- This route is cached for up to 86400 seconds
     * Get corporation history
     */
    async getCharactersCharacterIdCorporationhistory(requestParameters: GetCharactersCharacterIdCorporationhistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdCorporationhistory200Ok>> {
        const response = await this.getCharactersCharacterIdCorporationhistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a character\'s jump activation and fatigue information  --- Alternate route: `/dev/characters/{character_id}/fatigue/`  Alternate route: `/v2/characters/{character_id}/fatigue/`  --- This route is cached for up to 300 seconds
     * Get jump fatigue
     */
    async getCharactersCharacterIdFatigueRaw(requestParameters: GetCharactersCharacterIdFatigueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdFatigueOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdFatigue.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_fatigue.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/fatigue/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdFatigueOkFromJSON(jsonValue));
    }

    /**
     * Return a character\'s jump activation and fatigue information  --- Alternate route: `/dev/characters/{character_id}/fatigue/`  Alternate route: `/v2/characters/{character_id}/fatigue/`  --- This route is cached for up to 300 seconds
     * Get jump fatigue
     */
    async getCharactersCharacterIdFatigue(requestParameters: GetCharactersCharacterIdFatigueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdFatigueOk> {
        const response = await this.getCharactersCharacterIdFatigueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of medals the character has  --- Alternate route: `/dev/characters/{character_id}/medals/`  Alternate route: `/v2/characters/{character_id}/medals/`  --- This route is cached for up to 3600 seconds
     * Get medals
     */
    async getCharactersCharacterIdMedalsRaw(requestParameters: GetCharactersCharacterIdMedalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdMedals200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdMedals.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_medals.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/medals/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdMedals200OkFromJSON));
    }

    /**
     * Return a list of medals the character has  --- Alternate route: `/dev/characters/{character_id}/medals/`  Alternate route: `/v2/characters/{character_id}/medals/`  --- This route is cached for up to 3600 seconds
     * Get medals
     */
    async getCharactersCharacterIdMedals(requestParameters: GetCharactersCharacterIdMedalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdMedals200Ok>> {
        const response = await this.getCharactersCharacterIdMedalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  Alternate route: `/v6/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
     * Get character notifications
     */
    async getCharactersCharacterIdNotificationsRaw(requestParameters: GetCharactersCharacterIdNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdNotifications200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdNotifications.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_notifications.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/notifications/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdNotifications200OkFromJSON));
    }

    /**
     * Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  Alternate route: `/v6/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
     * Get character notifications
     */
    async getCharactersCharacterIdNotifications(requestParameters: GetCharactersCharacterIdNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdNotifications200Ok>> {
        const response = await this.getCharactersCharacterIdNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return notifications about having been added to someone\'s contact list  --- Alternate route: `/dev/characters/{character_id}/notifications/contacts/`  Alternate route: `/v2/characters/{character_id}/notifications/contacts/`  --- This route is cached for up to 600 seconds
     * Get new contact notifications
     */
    async getCharactersCharacterIdNotificationsContactsRaw(requestParameters: GetCharactersCharacterIdNotificationsContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdNotificationsContacts200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdNotificationsContacts.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_notifications.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/notifications/contacts/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdNotificationsContacts200OkFromJSON));
    }

    /**
     * Return notifications about having been added to someone\'s contact list  --- Alternate route: `/dev/characters/{character_id}/notifications/contacts/`  Alternate route: `/v2/characters/{character_id}/notifications/contacts/`  --- This route is cached for up to 600 seconds
     * Get new contact notifications
     */
    async getCharactersCharacterIdNotificationsContacts(requestParameters: GetCharactersCharacterIdNotificationsContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdNotificationsContacts200Ok>> {
        const response = await this.getCharactersCharacterIdNotificationsContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get portrait urls for a character  --- Alternate route: `/dev/characters/{character_id}/portrait/`  Alternate route: `/v2/characters/{character_id}/portrait/`  Alternate route: `/v3/characters/{character_id}/portrait/`  --- This route expires daily at 11:05
     * Get character portraits
     */
    async getCharactersCharacterIdPortraitRaw(requestParameters: GetCharactersCharacterIdPortraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdPortraitOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdPortrait.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/characters/{character_id}/portrait/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdPortraitOkFromJSON(jsonValue));
    }

    /**
     * Get portrait urls for a character  --- Alternate route: `/dev/characters/{character_id}/portrait/`  Alternate route: `/v2/characters/{character_id}/portrait/`  Alternate route: `/v3/characters/{character_id}/portrait/`  --- This route expires daily at 11:05
     * Get character portraits
     */
    async getCharactersCharacterIdPortrait(requestParameters: GetCharactersCharacterIdPortraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdPortraitOk> {
        const response = await this.getCharactersCharacterIdPortraitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a character\'s corporation roles  --- Alternate route: `/dev/characters/{character_id}/roles/`  Alternate route: `/v3/characters/{character_id}/roles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation roles
     */
    async getCharactersCharacterIdRolesRaw(requestParameters: GetCharactersCharacterIdRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdRolesOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_corporation_roles.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/roles/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdRolesOkFromJSON(jsonValue));
    }

    /**
     * Returns a character\'s corporation roles  --- Alternate route: `/dev/characters/{character_id}/roles/`  Alternate route: `/v3/characters/{character_id}/roles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation roles
     */
    async getCharactersCharacterIdRoles(requestParameters: GetCharactersCharacterIdRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdRolesOk> {
        const response = await this.getCharactersCharacterIdRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return character standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/characters/{character_id}/standings/`  Alternate route: `/v2/characters/{character_id}/standings/`  --- This route is cached for up to 3600 seconds
     * Get standings
     */
    async getCharactersCharacterIdStandingsRaw(requestParameters: GetCharactersCharacterIdStandingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdStandings200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdStandings.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_standings.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/standings/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdStandings200OkFromJSON));
    }

    /**
     * Return character standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/characters/{character_id}/standings/`  Alternate route: `/v2/characters/{character_id}/standings/`  --- This route is cached for up to 3600 seconds
     * Get standings
     */
    async getCharactersCharacterIdStandings(requestParameters: GetCharactersCharacterIdStandingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdStandings200Ok>> {
        const response = await this.getCharactersCharacterIdStandingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a character\'s titles  --- Alternate route: `/dev/characters/{character_id}/titles/`  Alternate route: `/v2/characters/{character_id}/titles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation titles
     */
    async getCharactersCharacterIdTitlesRaw(requestParameters: GetCharactersCharacterIdTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdTitles200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_titles.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/titles/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdTitles200OkFromJSON));
    }

    /**
     * Returns a character\'s titles  --- Alternate route: `/dev/characters/{character_id}/titles/`  Alternate route: `/v2/characters/{character_id}/titles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation titles
     */
    async getCharactersCharacterIdTitles(requestParameters: GetCharactersCharacterIdTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCharactersCharacterIdTitles200Ok>> {
        const response = await this.getCharactersCharacterIdTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: `/dev/characters/affiliation/`  Alternate route: `/v2/characters/affiliation/`  --- This route is cached for up to 3600 seconds
     * Character affiliation
     */
    async postCharactersAffiliationRaw(requestParameters: PostCharactersAffiliationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostCharactersAffiliation200Ok>>> {
        if (requestParameters.characters === null || requestParameters.characters === undefined) {
            throw new runtime.RequiredError('characters','Required parameter requestParameters.characters was null or undefined when calling postCharactersAffiliation.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/characters/affiliation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.characters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostCharactersAffiliation200OkFromJSON));
    }

    /**
     * Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: `/dev/characters/affiliation/`  Alternate route: `/v2/characters/affiliation/`  --- This route is cached for up to 3600 seconds
     * Character affiliation
     */
    async postCharactersAffiliation(requestParameters: PostCharactersAffiliationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostCharactersAffiliation200Ok>> {
        const response = await this.postCharactersAffiliationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Takes a source character ID in the url and a set of target character ID\'s in the body, returns a CSPA charge cost  --- Alternate route: `/dev/characters/{character_id}/cspa/`  Alternate route: `/v5/characters/{character_id}/cspa/` 
     * Calculate a CSPA charge cost
     */
    async postCharactersCharacterIdCspaRaw(requestParameters: PostCharactersCharacterIdCspaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling postCharactersCharacterIdCspa.');
        }

        if (requestParameters.characters === null || requestParameters.characters === undefined) {
            throw new runtime.RequiredError('characters','Required parameter requestParameters.characters was null or undefined when calling postCharactersCharacterIdCspa.');
        }

        const queryParameters: any = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-characters.read_contacts.v1"]);
        }

        const response = await this.request({
            path: `/characters/{character_id}/cspa/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.characters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Takes a source character ID in the url and a set of target character ID\'s in the body, returns a CSPA charge cost  --- Alternate route: `/dev/characters/{character_id}/cspa/`  Alternate route: `/v5/characters/{character_id}/cspa/` 
     * Calculate a CSPA charge cost
     */
    async postCharactersCharacterIdCspa(requestParameters: PostCharactersCharacterIdCspaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postCharactersCharacterIdCspaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdDatasourceEnum = typeof GetCharactersCharacterIdDatasourceEnum[keyof typeof GetCharactersCharacterIdDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdAgentsResearchDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdAgentsResearchDatasourceEnum = typeof GetCharactersCharacterIdAgentsResearchDatasourceEnum[keyof typeof GetCharactersCharacterIdAgentsResearchDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdBlueprintsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdBlueprintsDatasourceEnum = typeof GetCharactersCharacterIdBlueprintsDatasourceEnum[keyof typeof GetCharactersCharacterIdBlueprintsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdCorporationhistoryDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdCorporationhistoryDatasourceEnum = typeof GetCharactersCharacterIdCorporationhistoryDatasourceEnum[keyof typeof GetCharactersCharacterIdCorporationhistoryDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdFatigueDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdFatigueDatasourceEnum = typeof GetCharactersCharacterIdFatigueDatasourceEnum[keyof typeof GetCharactersCharacterIdFatigueDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdMedalsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdMedalsDatasourceEnum = typeof GetCharactersCharacterIdMedalsDatasourceEnum[keyof typeof GetCharactersCharacterIdMedalsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdNotificationsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdNotificationsDatasourceEnum = typeof GetCharactersCharacterIdNotificationsDatasourceEnum[keyof typeof GetCharactersCharacterIdNotificationsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdNotificationsContactsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdNotificationsContactsDatasourceEnum = typeof GetCharactersCharacterIdNotificationsContactsDatasourceEnum[keyof typeof GetCharactersCharacterIdNotificationsContactsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdPortraitDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdPortraitDatasourceEnum = typeof GetCharactersCharacterIdPortraitDatasourceEnum[keyof typeof GetCharactersCharacterIdPortraitDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdRolesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdRolesDatasourceEnum = typeof GetCharactersCharacterIdRolesDatasourceEnum[keyof typeof GetCharactersCharacterIdRolesDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdStandingsDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdStandingsDatasourceEnum = typeof GetCharactersCharacterIdStandingsDatasourceEnum[keyof typeof GetCharactersCharacterIdStandingsDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdTitlesDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdTitlesDatasourceEnum = typeof GetCharactersCharacterIdTitlesDatasourceEnum[keyof typeof GetCharactersCharacterIdTitlesDatasourceEnum];
/**
 * @export
 */
export const PostCharactersAffiliationDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostCharactersAffiliationDatasourceEnum = typeof PostCharactersAffiliationDatasourceEnum[keyof typeof PostCharactersAffiliationDatasourceEnum];
/**
 * @export
 */
export const PostCharactersCharacterIdCspaDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type PostCharactersCharacterIdCspaDatasourceEnum = typeof PostCharactersCharacterIdCspaDatasourceEnum[keyof typeof PostCharactersCharacterIdCspaDatasourceEnum];
