/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 200 ok object
 * @export
 * @interface GetCharactersCharacterIdContacts200Ok
 */
export interface GetCharactersCharacterIdContacts200Ok {
    /**
     * contact_id integer
     * @type {number}
     * @memberof GetCharactersCharacterIdContacts200Ok
     */
    contactId: number;
    /**
     * contact_type string
     * @type {string}
     * @memberof GetCharactersCharacterIdContacts200Ok
     */
    contactType: GetCharactersCharacterIdContacts200OkContactTypeEnum;
    /**
     * Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
     * @type {boolean}
     * @memberof GetCharactersCharacterIdContacts200Ok
     */
    isBlocked?: boolean;
    /**
     * Whether this contact is being watched
     * @type {boolean}
     * @memberof GetCharactersCharacterIdContacts200Ok
     */
    isWatched?: boolean;
    /**
     * label_ids array
     * @type {Array<number>}
     * @memberof GetCharactersCharacterIdContacts200Ok
     */
    labelIds?: Array<number>;
    /**
     * Standing of the contact
     * @type {number}
     * @memberof GetCharactersCharacterIdContacts200Ok
     */
    standing: number;
}


/**
 * @export
 */
export const GetCharactersCharacterIdContacts200OkContactTypeEnum = {
    Character: 'character',
    Corporation: 'corporation',
    Alliance: 'alliance',
    Faction: 'faction'
} as const;
export type GetCharactersCharacterIdContacts200OkContactTypeEnum = typeof GetCharactersCharacterIdContacts200OkContactTypeEnum[keyof typeof GetCharactersCharacterIdContacts200OkContactTypeEnum];


/**
 * Check if a given object implements the GetCharactersCharacterIdContacts200Ok interface.
 */
export function instanceOfGetCharactersCharacterIdContacts200Ok(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contactId" in value;
    isInstance = isInstance && "contactType" in value;
    isInstance = isInstance && "standing" in value;

    return isInstance;
}

export function GetCharactersCharacterIdContacts200OkFromJSON(json: any): GetCharactersCharacterIdContacts200Ok {
    return GetCharactersCharacterIdContacts200OkFromJSONTyped(json, false);
}

export function GetCharactersCharacterIdContacts200OkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCharactersCharacterIdContacts200Ok {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contactId': json['contact_id'],
        'contactType': json['contact_type'],
        'isBlocked': !exists(json, 'is_blocked') ? undefined : json['is_blocked'],
        'isWatched': !exists(json, 'is_watched') ? undefined : json['is_watched'],
        'labelIds': !exists(json, 'label_ids') ? undefined : json['label_ids'],
        'standing': json['standing'],
    };
}

export function GetCharactersCharacterIdContacts200OkToJSON(value?: GetCharactersCharacterIdContacts200Ok | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contact_id': value.contactId,
        'contact_type': value.contactType,
        'is_blocked': value.isBlocked,
        'is_watched': value.isWatched,
        'label_ids': value.labelIds,
        'standing': value.standing,
    };
}

