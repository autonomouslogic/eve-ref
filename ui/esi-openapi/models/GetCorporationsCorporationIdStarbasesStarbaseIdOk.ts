/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GetCorporationsCorporationIdStarbasesStarbaseIdFuel } from './GetCorporationsCorporationIdStarbasesStarbaseIdFuel';
import {
    GetCorporationsCorporationIdStarbasesStarbaseIdFuelFromJSON,
    GetCorporationsCorporationIdStarbasesStarbaseIdFuelFromJSONTyped,
    GetCorporationsCorporationIdStarbasesStarbaseIdFuelToJSON,
} from './GetCorporationsCorporationIdStarbasesStarbaseIdFuel';

/**
 * 200 ok object
 * @export
 * @interface GetCorporationsCorporationIdStarbasesStarbaseIdOk
 */
export interface GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    /**
     * allow_alliance_members boolean
     * @type {boolean}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    allowAllianceMembers: boolean;
    /**
     * allow_corporation_members boolean
     * @type {boolean}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    allowCorporationMembers: boolean;
    /**
     * Who can anchor starbase (POS) and its structures
     * @type {string}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    anchor: GetCorporationsCorporationIdStarbasesStarbaseIdOkAnchorEnum;
    /**
     * attack_if_at_war boolean
     * @type {boolean}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    attackIfAtWar: boolean;
    /**
     * attack_if_other_security_status_dropping boolean
     * @type {boolean}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    attackIfOtherSecurityStatusDropping: boolean;
    /**
     * Starbase (POS) will attack if target's security standing is lower than this value
     * @type {number}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    attackSecurityStatusThreshold?: number;
    /**
     * Starbase (POS) will attack if target's standing is lower than this value
     * @type {number}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    attackStandingThreshold?: number;
    /**
     * Who can take fuel blocks out of the starbase (POS)'s fuel bay
     * @type {string}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    fuelBayTake: GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayTakeEnum;
    /**
     * Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
     * @type {string}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    fuelBayView: GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayViewEnum;
    /**
     * Fuel blocks and other things that will be consumed when operating a starbase (POS)
     * @type {Array<GetCorporationsCorporationIdStarbasesStarbaseIdFuel>}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    fuels?: Array<GetCorporationsCorporationIdStarbasesStarbaseIdFuel>;
    /**
     * Who can offline starbase (POS) and its structures
     * @type {string}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    offline: GetCorporationsCorporationIdStarbasesStarbaseIdOkOfflineEnum;
    /**
     * Who can online starbase (POS) and its structures
     * @type {string}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    online: GetCorporationsCorporationIdStarbasesStarbaseIdOkOnlineEnum;
    /**
     * Who can unanchor starbase (POS) and its structures
     * @type {string}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    unanchor: GetCorporationsCorporationIdStarbasesStarbaseIdOkUnanchorEnum;
    /**
     * True if the starbase (POS) is using alliance standings, otherwise using corporation's
     * @type {boolean}
     * @memberof GetCorporationsCorporationIdStarbasesStarbaseIdOk
     */
    useAllianceStandings: boolean;
}


/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdOkAnchorEnum = {
    AllianceMember: 'alliance_member',
    ConfigStarbaseEquipmentRole: 'config_starbase_equipment_role',
    CorporationMember: 'corporation_member',
    StarbaseFuelTechnicianRole: 'starbase_fuel_technician_role'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdOkAnchorEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkAnchorEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkAnchorEnum];

/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayTakeEnum = {
    AllianceMember: 'alliance_member',
    ConfigStarbaseEquipmentRole: 'config_starbase_equipment_role',
    CorporationMember: 'corporation_member',
    StarbaseFuelTechnicianRole: 'starbase_fuel_technician_role'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayTakeEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayTakeEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayTakeEnum];

/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayViewEnum = {
    AllianceMember: 'alliance_member',
    ConfigStarbaseEquipmentRole: 'config_starbase_equipment_role',
    CorporationMember: 'corporation_member',
    StarbaseFuelTechnicianRole: 'starbase_fuel_technician_role'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayViewEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayViewEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkFuelBayViewEnum];

/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdOkOfflineEnum = {
    AllianceMember: 'alliance_member',
    ConfigStarbaseEquipmentRole: 'config_starbase_equipment_role',
    CorporationMember: 'corporation_member',
    StarbaseFuelTechnicianRole: 'starbase_fuel_technician_role'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdOkOfflineEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkOfflineEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkOfflineEnum];

/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdOkOnlineEnum = {
    AllianceMember: 'alliance_member',
    ConfigStarbaseEquipmentRole: 'config_starbase_equipment_role',
    CorporationMember: 'corporation_member',
    StarbaseFuelTechnicianRole: 'starbase_fuel_technician_role'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdOkOnlineEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkOnlineEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkOnlineEnum];

/**
 * @export
 */
export const GetCorporationsCorporationIdStarbasesStarbaseIdOkUnanchorEnum = {
    AllianceMember: 'alliance_member',
    ConfigStarbaseEquipmentRole: 'config_starbase_equipment_role',
    CorporationMember: 'corporation_member',
    StarbaseFuelTechnicianRole: 'starbase_fuel_technician_role'
} as const;
export type GetCorporationsCorporationIdStarbasesStarbaseIdOkUnanchorEnum = typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkUnanchorEnum[keyof typeof GetCorporationsCorporationIdStarbasesStarbaseIdOkUnanchorEnum];


/**
 * Check if a given object implements the GetCorporationsCorporationIdStarbasesStarbaseIdOk interface.
 */
export function instanceOfGetCorporationsCorporationIdStarbasesStarbaseIdOk(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allowAllianceMembers" in value;
    isInstance = isInstance && "allowCorporationMembers" in value;
    isInstance = isInstance && "anchor" in value;
    isInstance = isInstance && "attackIfAtWar" in value;
    isInstance = isInstance && "attackIfOtherSecurityStatusDropping" in value;
    isInstance = isInstance && "fuelBayTake" in value;
    isInstance = isInstance && "fuelBayView" in value;
    isInstance = isInstance && "offline" in value;
    isInstance = isInstance && "online" in value;
    isInstance = isInstance && "unanchor" in value;
    isInstance = isInstance && "useAllianceStandings" in value;

    return isInstance;
}

export function GetCorporationsCorporationIdStarbasesStarbaseIdOkFromJSON(json: any): GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    return GetCorporationsCorporationIdStarbasesStarbaseIdOkFromJSONTyped(json, false);
}

export function GetCorporationsCorporationIdStarbasesStarbaseIdOkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowAllianceMembers': json['allow_alliance_members'],
        'allowCorporationMembers': json['allow_corporation_members'],
        'anchor': json['anchor'],
        'attackIfAtWar': json['attack_if_at_war'],
        'attackIfOtherSecurityStatusDropping': json['attack_if_other_security_status_dropping'],
        'attackSecurityStatusThreshold': !exists(json, 'attack_security_status_threshold') ? undefined : json['attack_security_status_threshold'],
        'attackStandingThreshold': !exists(json, 'attack_standing_threshold') ? undefined : json['attack_standing_threshold'],
        'fuelBayTake': json['fuel_bay_take'],
        'fuelBayView': json['fuel_bay_view'],
        'fuels': !exists(json, 'fuels') ? undefined : ((json['fuels'] as Array<any>).map(GetCorporationsCorporationIdStarbasesStarbaseIdFuelFromJSON)),
        'offline': json['offline'],
        'online': json['online'],
        'unanchor': json['unanchor'],
        'useAllianceStandings': json['use_alliance_standings'],
    };
}

export function GetCorporationsCorporationIdStarbasesStarbaseIdOkToJSON(value?: GetCorporationsCorporationIdStarbasesStarbaseIdOk | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allow_alliance_members': value.allowAllianceMembers,
        'allow_corporation_members': value.allowCorporationMembers,
        'anchor': value.anchor,
        'attack_if_at_war': value.attackIfAtWar,
        'attack_if_other_security_status_dropping': value.attackIfOtherSecurityStatusDropping,
        'attack_security_status_threshold': value.attackSecurityStatusThreshold,
        'attack_standing_threshold': value.attackStandingThreshold,
        'fuel_bay_take': value.fuelBayTake,
        'fuel_bay_view': value.fuelBayView,
        'fuels': value.fuels === undefined ? undefined : ((value.fuels as Array<any>).map(GetCorporationsCorporationIdStarbasesStarbaseIdFuelToJSON)),
        'offline': value.offline,
        'online': value.online,
        'unanchor': value.unanchor,
        'use_alliance_standings': value.useAllianceStandings,
    };
}

