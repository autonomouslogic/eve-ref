/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 200 ok object
 * @export
 * @interface GetCharactersCharacterIdNotifications200Ok
 */
export interface GetCharactersCharacterIdNotifications200Ok {
    /**
     * is_read boolean
     * @type {boolean}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    isRead?: boolean;
    /**
     * notification_id integer
     * @type {number}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    notificationId: number;
    /**
     * sender_id integer
     * @type {number}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    senderId: number;
    /**
     * sender_type string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    senderType: GetCharactersCharacterIdNotifications200OkSenderTypeEnum;
    /**
     * text string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    text?: string;
    /**
     * timestamp string
     * @type {Date}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    timestamp: Date;
    /**
     * type string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    type: GetCharactersCharacterIdNotifications200OkTypeEnum;
}


/**
 * @export
 */
export const GetCharactersCharacterIdNotifications200OkSenderTypeEnum = {
    Character: 'character',
    Corporation: 'corporation',
    Alliance: 'alliance',
    Faction: 'faction',
    Other: 'other'
} as const;
export type GetCharactersCharacterIdNotifications200OkSenderTypeEnum = typeof GetCharactersCharacterIdNotifications200OkSenderTypeEnum[keyof typeof GetCharactersCharacterIdNotifications200OkSenderTypeEnum];

/**
 * @export
 */
export const GetCharactersCharacterIdNotifications200OkTypeEnum = {
    AcceptedAlly: 'AcceptedAlly',
    AcceptedSurrender: 'AcceptedSurrender',
    AgentRetiredTrigravian: 'AgentRetiredTrigravian',
    AllAnchoringMsg: 'AllAnchoringMsg',
    AllMaintenanceBillMsg: 'AllMaintenanceBillMsg',
    AllStrucInvulnerableMsg: 'AllStrucInvulnerableMsg',
    AllStructVulnerableMsg: 'AllStructVulnerableMsg',
    AllWarCorpJoinedAllianceMsg: 'AllWarCorpJoinedAllianceMsg',
    AllWarDeclaredMsg: 'AllWarDeclaredMsg',
    AllWarInvalidatedMsg: 'AllWarInvalidatedMsg',
    AllWarRetractedMsg: 'AllWarRetractedMsg',
    AllWarSurrenderMsg: 'AllWarSurrenderMsg',
    AllianceCapitalChanged: 'AllianceCapitalChanged',
    AllianceWarDeclaredV2: 'AllianceWarDeclaredV2',
    AllyContractCancelled: 'AllyContractCancelled',
    AllyJoinedWarAggressorMsg: 'AllyJoinedWarAggressorMsg',
    AllyJoinedWarAllyMsg: 'AllyJoinedWarAllyMsg',
    AllyJoinedWarDefenderMsg: 'AllyJoinedWarDefenderMsg',
    BattlePunishFriendlyFire: 'BattlePunishFriendlyFire',
    BillOutOfMoneyMsg: 'BillOutOfMoneyMsg',
    BillPaidCorpAllMsg: 'BillPaidCorpAllMsg',
    BountyClaimMsg: 'BountyClaimMsg',
    BountyEssShared: 'BountyESSShared',
    BountyEssTaken: 'BountyESSTaken',
    BountyPlacedAlliance: 'BountyPlacedAlliance',
    BountyPlacedChar: 'BountyPlacedChar',
    BountyPlacedCorp: 'BountyPlacedCorp',
    BountyYourBountyClaimed: 'BountyYourBountyClaimed',
    BuddyConnectContactAdd: 'BuddyConnectContactAdd',
    CharAppAcceptMsg: 'CharAppAcceptMsg',
    CharAppRejectMsg: 'CharAppRejectMsg',
    CharAppWithdrawMsg: 'CharAppWithdrawMsg',
    CharLeftCorpMsg: 'CharLeftCorpMsg',
    CharMedalMsg: 'CharMedalMsg',
    CharTerminationMsg: 'CharTerminationMsg',
    CloneActivationMsg: 'CloneActivationMsg',
    CloneActivationMsg2: 'CloneActivationMsg2',
    CloneMovedMsg: 'CloneMovedMsg',
    CloneRevokedMsg1: 'CloneRevokedMsg1',
    CloneRevokedMsg2: 'CloneRevokedMsg2',
    CombatOperationFinished: 'CombatOperationFinished',
    ContactAdd: 'ContactAdd',
    ContactEdit: 'ContactEdit',
    ContainerPasswordMsg: 'ContainerPasswordMsg',
    ContractRegionChangedToPochven: 'ContractRegionChangedToPochven',
    CorpAllBillMsg: 'CorpAllBillMsg',
    CorpAppAcceptMsg: 'CorpAppAcceptMsg',
    CorpAppInvitedMsg: 'CorpAppInvitedMsg',
    CorpAppNewMsg: 'CorpAppNewMsg',
    CorpAppRejectCustomMsg: 'CorpAppRejectCustomMsg',
    CorpAppRejectMsg: 'CorpAppRejectMsg',
    CorpBecameWarEligible: 'CorpBecameWarEligible',
    CorpDividendMsg: 'CorpDividendMsg',
    CorpFriendlyFireDisableTimerCompleted: 'CorpFriendlyFireDisableTimerCompleted',
    CorpFriendlyFireDisableTimerStarted: 'CorpFriendlyFireDisableTimerStarted',
    CorpFriendlyFireEnableTimerCompleted: 'CorpFriendlyFireEnableTimerCompleted',
    CorpFriendlyFireEnableTimerStarted: 'CorpFriendlyFireEnableTimerStarted',
    CorpKicked: 'CorpKicked',
    CorpLiquidationMsg: 'CorpLiquidationMsg',
    CorpNewCeoMsg: 'CorpNewCEOMsg',
    CorpNewsMsg: 'CorpNewsMsg',
    CorpNoLongerWarEligible: 'CorpNoLongerWarEligible',
    CorpOfficeExpirationMsg: 'CorpOfficeExpirationMsg',
    CorpStructLostMsg: 'CorpStructLostMsg',
    CorpTaxChangeMsg: 'CorpTaxChangeMsg',
    CorpVoteCeoRevokedMsg: 'CorpVoteCEORevokedMsg',
    CorpVoteMsg: 'CorpVoteMsg',
    CorpWarDeclaredMsg: 'CorpWarDeclaredMsg',
    CorpWarDeclaredV2: 'CorpWarDeclaredV2',
    CorpWarFightingLegalMsg: 'CorpWarFightingLegalMsg',
    CorpWarInvalidatedMsg: 'CorpWarInvalidatedMsg',
    CorpWarRetractedMsg: 'CorpWarRetractedMsg',
    CorpWarSurrenderMsg: 'CorpWarSurrenderMsg',
    CorporationGoalClosed: 'CorporationGoalClosed',
    CorporationGoalCompleted: 'CorporationGoalCompleted',
    CorporationGoalCreated: 'CorporationGoalCreated',
    CustomsMsg: 'CustomsMsg',
    DeclareWar: 'DeclareWar',
    DistrictAttacked: 'DistrictAttacked',
    DustAppAcceptedMsg: 'DustAppAcceptedMsg',
    EssMainBankLink: 'ESSMainBankLink',
    EntosisCaptureStarted: 'EntosisCaptureStarted',
    ExpertSystemExpired: 'ExpertSystemExpired',
    ExpertSystemExpiryImminent: 'ExpertSystemExpiryImminent',
    FwAllianceKickMsg: 'FWAllianceKickMsg',
    FwAllianceWarningMsg: 'FWAllianceWarningMsg',
    FwCharKickMsg: 'FWCharKickMsg',
    FwCharRankGainMsg: 'FWCharRankGainMsg',
    FwCharRankLossMsg: 'FWCharRankLossMsg',
    FwCharWarningMsg: 'FWCharWarningMsg',
    FwCorpJoinMsg: 'FWCorpJoinMsg',
    FwCorpKickMsg: 'FWCorpKickMsg',
    FwCorpLeaveMsg: 'FWCorpLeaveMsg',
    FwCorpWarningMsg: 'FWCorpWarningMsg',
    FacWarCorpJoinRequestMsg: 'FacWarCorpJoinRequestMsg',
    FacWarCorpJoinWithdrawMsg: 'FacWarCorpJoinWithdrawMsg',
    FacWarCorpLeaveRequestMsg: 'FacWarCorpLeaveRequestMsg',
    FacWarCorpLeaveWithdrawMsg: 'FacWarCorpLeaveWithdrawMsg',
    FacWarLpDisqualifiedEvent: 'FacWarLPDisqualifiedEvent',
    FacWarLpDisqualifiedKill: 'FacWarLPDisqualifiedKill',
    FacWarLpPayoutEvent: 'FacWarLPPayoutEvent',
    FacWarLpPayoutKill: 'FacWarLPPayoutKill',
    GameTimeAdded: 'GameTimeAdded',
    GameTimeReceived: 'GameTimeReceived',
    GameTimeSent: 'GameTimeSent',
    GiftReceived: 'GiftReceived',
    IHubDestroyedByBillFailure: 'IHubDestroyedByBillFailure',
    IncursionCompletedMsg: 'IncursionCompletedMsg',
    IndustryOperationFinished: 'IndustryOperationFinished',
    IndustryTeamAuctionLost: 'IndustryTeamAuctionLost',
    IndustryTeamAuctionWon: 'IndustryTeamAuctionWon',
    InfrastructureHubBillAboutToExpire: 'InfrastructureHubBillAboutToExpire',
    InsuranceExpirationMsg: 'InsuranceExpirationMsg',
    InsuranceFirstShipMsg: 'InsuranceFirstShipMsg',
    InsuranceInvalidatedMsg: 'InsuranceInvalidatedMsg',
    InsuranceIssuedMsg: 'InsuranceIssuedMsg',
    InsurancePayoutMsg: 'InsurancePayoutMsg',
    InvasionCompletedMsg: 'InvasionCompletedMsg',
    InvasionSystemLogin: 'InvasionSystemLogin',
    InvasionSystemStart: 'InvasionSystemStart',
    JumpCloneDeletedMsg1: 'JumpCloneDeletedMsg1',
    JumpCloneDeletedMsg2: 'JumpCloneDeletedMsg2',
    KillReportFinalBlow: 'KillReportFinalBlow',
    KillReportVictim: 'KillReportVictim',
    KillRightAvailable: 'KillRightAvailable',
    KillRightAvailableOpen: 'KillRightAvailableOpen',
    KillRightEarned: 'KillRightEarned',
    KillRightUnavailable: 'KillRightUnavailable',
    KillRightUnavailableOpen: 'KillRightUnavailableOpen',
    KillRightUsed: 'KillRightUsed',
    LocateCharMsg: 'LocateCharMsg',
    MadeWarMutual: 'MadeWarMutual',
    MercOfferRetractedMsg: 'MercOfferRetractedMsg',
    MercOfferedNegotiationMsg: 'MercOfferedNegotiationMsg',
    MissionCanceledTriglavian: 'MissionCanceledTriglavian',
    MissionOfferExpirationMsg: 'MissionOfferExpirationMsg',
    MissionTimeoutMsg: 'MissionTimeoutMsg',
    MoonminingAutomaticFracture: 'MoonminingAutomaticFracture',
    MoonminingExtractionCancelled: 'MoonminingExtractionCancelled',
    MoonminingExtractionFinished: 'MoonminingExtractionFinished',
    MoonminingExtractionStarted: 'MoonminingExtractionStarted',
    MoonminingLaserFired: 'MoonminingLaserFired',
    MutualWarExpired: 'MutualWarExpired',
    MutualWarInviteAccepted: 'MutualWarInviteAccepted',
    MutualWarInviteRejected: 'MutualWarInviteRejected',
    MutualWarInviteSent: 'MutualWarInviteSent',
    NpcStandingsGained: 'NPCStandingsGained',
    NpcStandingsLost: 'NPCStandingsLost',
    OfferToAllyRetracted: 'OfferToAllyRetracted',
    OfferedSurrender: 'OfferedSurrender',
    OfferedToAlly: 'OfferedToAlly',
    OfficeLeaseCanceledInsufficientStandings: 'OfficeLeaseCanceledInsufficientStandings',
    OldLscMessages: 'OldLscMessages',
    OperationFinished: 'OperationFinished',
    OrbitalAttacked: 'OrbitalAttacked',
    OrbitalReinforced: 'OrbitalReinforced',
    OwnershipTransferred: 'OwnershipTransferred',
    RaffleCreated: 'RaffleCreated',
    RaffleExpired: 'RaffleExpired',
    RaffleFinished: 'RaffleFinished',
    ReimbursementMsg: 'ReimbursementMsg',
    ResearchMissionAvailableMsg: 'ResearchMissionAvailableMsg',
    RetractsWar: 'RetractsWar',
    SeasonalChallengeCompleted: 'SeasonalChallengeCompleted',
    SovAllClaimAquiredMsg: 'SovAllClaimAquiredMsg',
    SovAllClaimLostMsg: 'SovAllClaimLostMsg',
    SovCommandNodeEventStarted: 'SovCommandNodeEventStarted',
    SovCorpBillLateMsg: 'SovCorpBillLateMsg',
    SovCorpClaimFailMsg: 'SovCorpClaimFailMsg',
    SovDisruptorMsg: 'SovDisruptorMsg',
    SovStationEnteredFreeport: 'SovStationEnteredFreeport',
    SovStructureDestroyed: 'SovStructureDestroyed',
    SovStructureReinforced: 'SovStructureReinforced',
    SovStructureSelfDestructCancel: 'SovStructureSelfDestructCancel',
    SovStructureSelfDestructFinished: 'SovStructureSelfDestructFinished',
    SovStructureSelfDestructRequested: 'SovStructureSelfDestructRequested',
    SovereigntyIhDamageMsg: 'SovereigntyIHDamageMsg',
    SovereigntySbuDamageMsg: 'SovereigntySBUDamageMsg',
    SovereigntyTcuDamageMsg: 'SovereigntyTCUDamageMsg',
    StationAggressionMsg1: 'StationAggressionMsg1',
    StationAggressionMsg2: 'StationAggressionMsg2',
    StationConquerMsg: 'StationConquerMsg',
    StationServiceDisabled: 'StationServiceDisabled',
    StationServiceEnabled: 'StationServiceEnabled',
    StationStateChangeMsg: 'StationStateChangeMsg',
    StoryLineMissionAvailableMsg: 'StoryLineMissionAvailableMsg',
    StructureAnchoring: 'StructureAnchoring',
    StructureCourierContractChanged: 'StructureCourierContractChanged',
    StructureDestroyed: 'StructureDestroyed',
    StructureFuelAlert: 'StructureFuelAlert',
    StructureImpendingAbandonmentAssetsAtRisk: 'StructureImpendingAbandonmentAssetsAtRisk',
    StructureItemsDelivered: 'StructureItemsDelivered',
    StructureItemsMovedToSafety: 'StructureItemsMovedToSafety',
    StructureLostArmor: 'StructureLostArmor',
    StructureLostShields: 'StructureLostShields',
    StructureOnline: 'StructureOnline',
    StructurePaintPurchased: 'StructurePaintPurchased',
    StructureServicesOffline: 'StructureServicesOffline',
    StructureUnanchoring: 'StructureUnanchoring',
    StructureUnderAttack: 'StructureUnderAttack',
    StructureWentHighPower: 'StructureWentHighPower',
    StructureWentLowPower: 'StructureWentLowPower',
    StructuresJobsCancelled: 'StructuresJobsCancelled',
    StructuresJobsPaused: 'StructuresJobsPaused',
    StructuresReinforcementChanged: 'StructuresReinforcementChanged',
    TowerAlertMsg: 'TowerAlertMsg',
    TowerResourceAlertMsg: 'TowerResourceAlertMsg',
    TransactionReversalMsg: 'TransactionReversalMsg',
    TutorialMsg: 'TutorialMsg',
    WarAdopted: 'WarAdopted ',
    WarAllyInherited: 'WarAllyInherited',
    WarAllyOfferDeclinedMsg: 'WarAllyOfferDeclinedMsg',
    WarConcordInvalidates: 'WarConcordInvalidates',
    WarDeclared: 'WarDeclared',
    WarEndedHqSecurityDrop: 'WarEndedHqSecurityDrop',
    WarHqRemovedFromSpace: 'WarHQRemovedFromSpace',
    WarInherited: 'WarInherited',
    WarInvalid: 'WarInvalid',
    WarRetracted: 'WarRetracted',
    WarRetractedByConcord: 'WarRetractedByConcord',
    WarSurrenderDeclinedMsg: 'WarSurrenderDeclinedMsg',
    WarSurrenderOfferMsg: 'WarSurrenderOfferMsg'
} as const;
export type GetCharactersCharacterIdNotifications200OkTypeEnum = typeof GetCharactersCharacterIdNotifications200OkTypeEnum[keyof typeof GetCharactersCharacterIdNotifications200OkTypeEnum];


/**
 * Check if a given object implements the GetCharactersCharacterIdNotifications200Ok interface.
 */
export function instanceOfGetCharactersCharacterIdNotifications200Ok(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "notificationId" in value;
    isInstance = isInstance && "senderId" in value;
    isInstance = isInstance && "senderType" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GetCharactersCharacterIdNotifications200OkFromJSON(json: any): GetCharactersCharacterIdNotifications200Ok {
    return GetCharactersCharacterIdNotifications200OkFromJSONTyped(json, false);
}

export function GetCharactersCharacterIdNotifications200OkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCharactersCharacterIdNotifications200Ok {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isRead': !exists(json, 'is_read') ? undefined : json['is_read'],
        'notificationId': json['notification_id'],
        'senderId': json['sender_id'],
        'senderType': json['sender_type'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'timestamp': (new Date(json['timestamp'])),
        'type': json['type'],
    };
}

export function GetCharactersCharacterIdNotifications200OkToJSON(value?: GetCharactersCharacterIdNotifications200Ok | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'is_read': value.isRead,
        'notification_id': value.notificationId,
        'sender_id': value.senderId,
        'sender_type': value.senderType,
        'text': value.text,
        'timestamp': (value.timestamp.toISOString()),
        'type': value.type,
    };
}

