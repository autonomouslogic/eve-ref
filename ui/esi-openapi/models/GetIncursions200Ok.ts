/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 200 ok object
 * @export
 * @interface GetIncursions200Ok
 */
export interface GetIncursions200Ok {
    /**
     * The constellation id in which this incursion takes place
     * @type {number}
     * @memberof GetIncursions200Ok
     */
    constellationId: number;
    /**
     * The attacking faction's id
     * @type {number}
     * @memberof GetIncursions200Ok
     */
    factionId: number;
    /**
     * Whether the final encounter has boss or not
     * @type {boolean}
     * @memberof GetIncursions200Ok
     */
    hasBoss: boolean;
    /**
     * A list of infested solar system ids that are a part of this incursion
     * @type {Array<number>}
     * @memberof GetIncursions200Ok
     */
    infestedSolarSystems: Array<number>;
    /**
     * Influence of this incursion as a float from 0 to 1
     * @type {number}
     * @memberof GetIncursions200Ok
     */
    influence: number;
    /**
     * Staging solar system for this incursion
     * @type {number}
     * @memberof GetIncursions200Ok
     */
    stagingSolarSystemId: number;
    /**
     * The state of this incursion
     * @type {string}
     * @memberof GetIncursions200Ok
     */
    state: GetIncursions200OkStateEnum;
    /**
     * The type of this incursion
     * @type {string}
     * @memberof GetIncursions200Ok
     */
    type: string;
}


/**
 * @export
 */
export const GetIncursions200OkStateEnum = {
    Withdrawing: 'withdrawing',
    Mobilizing: 'mobilizing',
    Established: 'established'
} as const;
export type GetIncursions200OkStateEnum = typeof GetIncursions200OkStateEnum[keyof typeof GetIncursions200OkStateEnum];


/**
 * Check if a given object implements the GetIncursions200Ok interface.
 */
export function instanceOfGetIncursions200Ok(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "constellationId" in value;
    isInstance = isInstance && "factionId" in value;
    isInstance = isInstance && "hasBoss" in value;
    isInstance = isInstance && "infestedSolarSystems" in value;
    isInstance = isInstance && "influence" in value;
    isInstance = isInstance && "stagingSolarSystemId" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GetIncursions200OkFromJSON(json: any): GetIncursions200Ok {
    return GetIncursions200OkFromJSONTyped(json, false);
}

export function GetIncursions200OkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetIncursions200Ok {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'constellationId': json['constellation_id'],
        'factionId': json['faction_id'],
        'hasBoss': json['has_boss'],
        'infestedSolarSystems': json['infested_solar_systems'],
        'influence': json['influence'],
        'stagingSolarSystemId': json['staging_solar_system_id'],
        'state': json['state'],
        'type': json['type'],
    };
}

export function GetIncursions200OkToJSON(value?: GetIncursions200Ok | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'constellation_id': value.constellationId,
        'faction_id': value.factionId,
        'has_boss': value.hasBoss,
        'infested_solar_systems': value.infestedSolarSystems,
        'influence': value.influence,
        'staging_solar_system_id': value.stagingSolarSystemId,
        'state': value.state,
        'type': value.type,
    };
}

