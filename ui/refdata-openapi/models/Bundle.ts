/* tslint:disable */
/* eslint-disable */
/**
 * EVE Ref Reference Data for EVE Online
 * This spec should be considered unstable and subject to change at any time.
 *
 * The version of the OpenAPI document: dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Blueprint } from './Blueprint';
import {
    BlueprintFromJSON,
    BlueprintFromJSONTyped,
    BlueprintToJSON,
} from './Blueprint';
import type { DogmaAttribute } from './DogmaAttribute';
import {
    DogmaAttributeFromJSON,
    DogmaAttributeFromJSONTyped,
    DogmaAttributeToJSON,
} from './DogmaAttribute';
import type { Icon } from './Icon';
import {
    IconFromJSON,
    IconFromJSONTyped,
    IconToJSON,
} from './Icon';
import type { InventoryCategory } from './InventoryCategory';
import {
    InventoryCategoryFromJSON,
    InventoryCategoryFromJSONTyped,
    InventoryCategoryToJSON,
} from './InventoryCategory';
import type { InventoryGroup } from './InventoryGroup';
import {
    InventoryGroupFromJSON,
    InventoryGroupFromJSONTyped,
    InventoryGroupToJSON,
} from './InventoryGroup';
import type { InventoryType } from './InventoryType';
import {
    InventoryTypeFromJSON,
    InventoryTypeFromJSONTyped,
    InventoryTypeToJSON,
} from './InventoryType';
import type { MarketGroup } from './MarketGroup';
import {
    MarketGroupFromJSON,
    MarketGroupFromJSONTyped,
    MarketGroupToJSON,
} from './MarketGroup';
import type { MetaGroup } from './MetaGroup';
import {
    MetaGroupFromJSON,
    MetaGroupFromJSONTyped,
    MetaGroupToJSON,
} from './MetaGroup';
import type { Skill } from './Skill';
import {
    SkillFromJSON,
    SkillFromJSONTyped,
    SkillToJSON,
} from './Skill';
import type { Unit } from './Unit';
import {
    UnitFromJSON,
    UnitFromJSONTyped,
    UnitToJSON,
} from './Unit';

/**
 * 
 * @export
 * @interface Bundle
 */
export interface Bundle {
    /**
     * A map of types. The key is the type ID.
     * @type {{ [key: string]: InventoryType; }}
     * @memberof Bundle
     */
    types?: { [key: string]: InventoryType; };
    /**
     * A map of dogma attributes. The key is the attribute ID.
     * @type {{ [key: string]: DogmaAttribute; }}
     * @memberof Bundle
     */
    dogmaAttributes?: { [key: string]: DogmaAttribute; };
    /**
     * A map of skills. The key is the skill ID.
     * @type {{ [key: string]: Skill; }}
     * @memberof Bundle
     */
    skills?: { [key: string]: Skill; };
    /**
     * A map of units. The key is the unit ID.
     * @type {{ [key: string]: Unit; }}
     * @memberof Bundle
     */
    units?: { [key: string]: Unit; };
    /**
     * A map of icons. The key is the icon ID.
     * @type {{ [key: string]: Icon; }}
     * @memberof Bundle
     */
    icons?: { [key: string]: Icon; };
    /**
     * A map of market groups. The key is the market group ID.
     * @type {{ [key: string]: MarketGroup; }}
     * @memberof Bundle
     */
    marketGroups?: { [key: string]: MarketGroup; };
    /**
     * A map of inventory categories. The key is the category ID.
     * @type {{ [key: string]: InventoryCategory; }}
     * @memberof Bundle
     */
    categories?: { [key: string]: InventoryCategory; };
    /**
     * A map of inventory groups. The key is the group ID.
     * @type {{ [key: string]: InventoryGroup; }}
     * @memberof Bundle
     */
    groups?: { [key: string]: InventoryGroup; };
    /**
     * A map of meta groups. The key is the group ID.
     * @type {{ [key: string]: MetaGroup; }}
     * @memberof Bundle
     */
    metaGroups?: { [key: string]: MetaGroup; };
    /**
     * A map of blueprints. The key is the blueprint type ID.
     * @type {{ [key: string]: Blueprint; }}
     * @memberof Bundle
     */
    blueprints?: { [key: string]: Blueprint; };
}

/**
 * Check if a given object implements the Bundle interface.
 */
export function instanceOfBundle(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BundleFromJSON(json: any): Bundle {
    return BundleFromJSONTyped(json, false);
}

export function BundleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bundle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'types': !exists(json, 'types') ? undefined : (mapValues(json['types'], InventoryTypeFromJSON)),
        'dogmaAttributes': !exists(json, 'dogma_attributes') ? undefined : (mapValues(json['dogma_attributes'], DogmaAttributeFromJSON)),
        'skills': !exists(json, 'skills') ? undefined : (mapValues(json['skills'], SkillFromJSON)),
        'units': !exists(json, 'units') ? undefined : (mapValues(json['units'], UnitFromJSON)),
        'icons': !exists(json, 'icons') ? undefined : (mapValues(json['icons'], IconFromJSON)),
        'marketGroups': !exists(json, 'market_groups') ? undefined : (mapValues(json['market_groups'], MarketGroupFromJSON)),
        'categories': !exists(json, 'categories') ? undefined : (mapValues(json['categories'], InventoryCategoryFromJSON)),
        'groups': !exists(json, 'groups') ? undefined : (mapValues(json['groups'], InventoryGroupFromJSON)),
        'metaGroups': !exists(json, 'meta_groups') ? undefined : (mapValues(json['meta_groups'], MetaGroupFromJSON)),
        'blueprints': !exists(json, 'blueprints') ? undefined : (mapValues(json['blueprints'], BlueprintFromJSON)),
    };
}

export function BundleToJSON(value?: Bundle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'types': value.types === undefined ? undefined : (mapValues(value.types, InventoryTypeToJSON)),
        'dogma_attributes': value.dogmaAttributes === undefined ? undefined : (mapValues(value.dogmaAttributes, DogmaAttributeToJSON)),
        'skills': value.skills === undefined ? undefined : (mapValues(value.skills, SkillToJSON)),
        'units': value.units === undefined ? undefined : (mapValues(value.units, UnitToJSON)),
        'icons': value.icons === undefined ? undefined : (mapValues(value.icons, IconToJSON)),
        'market_groups': value.marketGroups === undefined ? undefined : (mapValues(value.marketGroups, MarketGroupToJSON)),
        'categories': value.categories === undefined ? undefined : (mapValues(value.categories, InventoryCategoryToJSON)),
        'groups': value.groups === undefined ? undefined : (mapValues(value.groups, InventoryGroupToJSON)),
        'meta_groups': value.metaGroups === undefined ? undefined : (mapValues(value.metaGroups, MetaGroupToJSON)),
        'blueprints': value.blueprints === undefined ? undefined : (mapValues(value.blueprints, BlueprintToJSON)),
    };
}

