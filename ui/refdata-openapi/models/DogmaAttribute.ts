/* tslint:disable */
/* eslint-disable */
/**
 * EVE Ref Reference Data for EVE Online
 * This spec should be considered unstable and subject to change at any time.
 *
 * The version of the OpenAPI document: dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A map of dogma attributes. The key is the attribute ID.
 * @export
 * @interface DogmaAttribute
 */
export interface DogmaAttribute {
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    attributeId?: number;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    categoryId?: number;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    chargeRechargeTimeId?: number;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    dataType?: number;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    defaultValue?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DogmaAttribute
     */
    description?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DogmaAttribute
     */
    displayName?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof DogmaAttribute
     */
    displayWhenZero?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DogmaAttribute
     */
    highIsGood?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    iconId?: number;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    maxAttributeId?: number;
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    minAttributeId?: number;
    /**
     * 
     * @type {string}
     * @memberof DogmaAttribute
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DogmaAttribute
     */
    published?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DogmaAttribute
     */
    stackable?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DogmaAttribute
     */
    tooltipDescription?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DogmaAttribute
     */
    tooltipTitle?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof DogmaAttribute
     */
    unitId?: number;
}

/**
 * Check if a given object implements the DogmaAttribute interface.
 */
export function instanceOfDogmaAttribute(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DogmaAttributeFromJSON(json: any): DogmaAttribute {
    return DogmaAttributeFromJSONTyped(json, false);
}

export function DogmaAttributeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DogmaAttribute {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeId': !exists(json, 'attribute_id') ? undefined : json['attribute_id'],
        'categoryId': !exists(json, 'category_id') ? undefined : json['category_id'],
        'chargeRechargeTimeId': !exists(json, 'charge_recharge_time_id') ? undefined : json['charge_recharge_time_id'],
        'dataType': !exists(json, 'data_type') ? undefined : json['data_type'],
        'defaultValue': !exists(json, 'default_value') ? undefined : json['default_value'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'displayWhenZero': !exists(json, 'display_when_zero') ? undefined : json['display_when_zero'],
        'highIsGood': !exists(json, 'high_is_good') ? undefined : json['high_is_good'],
        'iconId': !exists(json, 'icon_id') ? undefined : json['icon_id'],
        'maxAttributeId': !exists(json, 'max_attribute_id') ? undefined : json['max_attribute_id'],
        'minAttributeId': !exists(json, 'min_attribute_id') ? undefined : json['min_attribute_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'published': !exists(json, 'published') ? undefined : json['published'],
        'stackable': !exists(json, 'stackable') ? undefined : json['stackable'],
        'tooltipDescription': !exists(json, 'tooltip_description') ? undefined : json['tooltip_description'],
        'tooltipTitle': !exists(json, 'tooltip_title') ? undefined : json['tooltip_title'],
        'unitId': !exists(json, 'unit_id') ? undefined : json['unit_id'],
    };
}

export function DogmaAttributeToJSON(value?: DogmaAttribute | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attribute_id': value.attributeId,
        'category_id': value.categoryId,
        'charge_recharge_time_id': value.chargeRechargeTimeId,
        'data_type': value.dataType,
        'default_value': value.defaultValue,
        'description': value.description,
        'display_name': value.displayName,
        'display_when_zero': value.displayWhenZero,
        'high_is_good': value.highIsGood,
        'icon_id': value.iconId,
        'max_attribute_id': value.maxAttributeId,
        'min_attribute_id': value.minAttributeId,
        'name': value.name,
        'published': value.published,
        'stackable': value.stackable,
        'tooltip_description': value.tooltipDescription,
        'tooltip_title': value.tooltipTitle,
        'unit_id': value.unitId,
    };
}

