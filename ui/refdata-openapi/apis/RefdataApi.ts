/* tslint:disable */
/* eslint-disable */
/**
 * EVE Ref Reference Data for EVE Online
 * This spec should be considered unstable and subject to change at any time.
 *
 * The version of the OpenAPI document: dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blueprint,
  Bundle,
  DogmaAttribute,
  DogmaEffect,
  Icon,
  InventoryCategory,
  InventoryGroup,
  InventoryType,
  MarketGroup,
  MetaGroup,
  Mutaplasmid,
  RefDataMeta,
  Region,
  Schematic,
  Skill,
  Unit,
} from '../models';
import {
    BlueprintFromJSON,
    BlueprintToJSON,
    BundleFromJSON,
    BundleToJSON,
    DogmaAttributeFromJSON,
    DogmaAttributeToJSON,
    DogmaEffectFromJSON,
    DogmaEffectToJSON,
    IconFromJSON,
    IconToJSON,
    InventoryCategoryFromJSON,
    InventoryCategoryToJSON,
    InventoryGroupFromJSON,
    InventoryGroupToJSON,
    InventoryTypeFromJSON,
    InventoryTypeToJSON,
    MarketGroupFromJSON,
    MarketGroupToJSON,
    MetaGroupFromJSON,
    MetaGroupToJSON,
    MutaplasmidFromJSON,
    MutaplasmidToJSON,
    RefDataMetaFromJSON,
    RefDataMetaToJSON,
    RegionFromJSON,
    RegionToJSON,
    SchematicFromJSON,
    SchematicToJSON,
    SkillFromJSON,
    SkillToJSON,
    UnitFromJSON,
    UnitToJSON,
} from '../models';

export interface GetBlueprintRequest {
    blueprintTypeId: number;
}

export interface GetCategoryRequest {
    categoryId: number;
}

export interface GetCategoryBundleRequest {
    categoryId: number;
}

export interface GetDogmaAttributeRequest {
    attributeId: number;
}

export interface GetDogmaEffectRequest {
    effectId: number;
}

export interface GetGroupRequest {
    groupId: number;
}

export interface GetGroupBundleRequest {
    groupId: number;
}

export interface GetIconRequest {
    iconId: number;
}

export interface GetMarketGroupRequest {
    marketGroupId: number;
}

export interface GetMarketGroupBundleRequest {
    marketGroupId: number;
}

export interface GetMetaGroupRequest {
    metaGroupId: number;
}

export interface GetMutaplasmidRequest {
    mutaplasmidTypeId: number;
}

export interface GetRegionRequest {
    regionId: number;
}

export interface GetSchematicRequest {
    schematicId: number;
}

export interface GetSkillRequest {
    skillTypeId: number;
}

export interface GetTypeRequest {
    typeId: number;
}

export interface GetTypeBundleRequest {
    typeId: number;
}

export interface GetUnitRequest {
    unitId: number;
}

/**
 * 
 */
export class RefdataApi extends runtime.BaseAPI {

    /**
     * Get all blueprint IDs.
     */
    async getAllBlueprintsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blueprints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all blueprint IDs.
     */
    async getAllBlueprints(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllBlueprintsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all category IDs.
     */
    async getAllCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all category IDs.
     */
    async getAllCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all dogma attribute IDs.
     */
    async getAllDogmaAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogma_attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all dogma attribute IDs.
     */
    async getAllDogmaAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllDogmaAttributesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all dogma effect IDs.
     */
    async getAllDogmaEffectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogma_effects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all dogma effect IDs.
     */
    async getAllDogmaEffects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllDogmaEffectsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all type IDs.
     */
    async getAllGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all type IDs.
     */
    async getAllGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all icon IDs.
     */
    async getAllIconsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/icons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all icon IDs.
     */
    async getAllIcons(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllIconsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all market group IDs.
     */
    async getAllMarketGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/market_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all market group IDs.
     */
    async getAllMarketGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllMarketGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all meta group IDs.
     */
    async getAllMetaGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all meta group IDs.
     */
    async getAllMetaGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllMetaGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all mutaplasmid IDs.
     */
    async getAllMutaplasmidsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mutaplasmids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all mutaplasmid IDs.
     */
    async getAllMutaplasmids(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllMutaplasmidsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all region IDs.
     */
    async getAllRegionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all region IDs.
     */
    async getAllRegions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllRegionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all schematic IDs.
     */
    async getAllSchematicsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schematics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all schematic IDs.
     */
    async getAllSchematics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllSchematicsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all skill type IDs.
     */
    async getAllSkillsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all skill type IDs.
     */
    async getAllSkills(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllSkillsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all type IDs.
     */
    async getAllTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all type IDs.
     */
    async getAllTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all unit IDs.
     */
    async getAllUnitsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all unit IDs.
     */
    async getAllUnits(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllUnitsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlueprintRaw(requestParameters: GetBlueprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blueprint>> {
        if (requestParameters.blueprintTypeId === null || requestParameters.blueprintTypeId === undefined) {
            throw new runtime.RequiredError('blueprintTypeId','Required parameter requestParameters.blueprintTypeId was null or undefined when calling getBlueprint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blueprints/{blueprint_type_id}`.replace(`{${"blueprint_type_id"}}`, encodeURIComponent(String(requestParameters.blueprintTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlueprintFromJSON(jsonValue));
    }

    /**
     */
    async getBlueprint(requestParameters: GetBlueprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blueprint> {
        const response = await this.getBlueprintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCategoriesBundleRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bundle>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/bundle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
    }

    /**
     */
    async getCategoriesBundle(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bundle> {
        const response = await this.getCategoriesBundleRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCategoryRaw(requestParameters: GetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryCategory>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{category_id}`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryCategoryFromJSON(jsonValue));
    }

    /**
     */
    async getCategory(requestParameters: GetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryCategory> {
        const response = await this.getCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCategoryBundleRaw(requestParameters: GetCategoryBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bundle>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryBundle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{category_id}/bundle`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
    }

    /**
     */
    async getCategoryBundle(requestParameters: GetCategoryBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bundle> {
        const response = await this.getCategoryBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDogmaAttributeRaw(requestParameters: GetDogmaAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DogmaAttribute>> {
        if (requestParameters.attributeId === null || requestParameters.attributeId === undefined) {
            throw new runtime.RequiredError('attributeId','Required parameter requestParameters.attributeId was null or undefined when calling getDogmaAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogma_attributes/{attribute_id}`.replace(`{${"attribute_id"}}`, encodeURIComponent(String(requestParameters.attributeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogmaAttributeFromJSON(jsonValue));
    }

    /**
     */
    async getDogmaAttribute(requestParameters: GetDogmaAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DogmaAttribute> {
        const response = await this.getDogmaAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDogmaEffectRaw(requestParameters: GetDogmaEffectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DogmaEffect>> {
        if (requestParameters.effectId === null || requestParameters.effectId === undefined) {
            throw new runtime.RequiredError('effectId','Required parameter requestParameters.effectId was null or undefined when calling getDogmaEffect.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogma_effects/{effect_id}`.replace(`{${"effect_id"}}`, encodeURIComponent(String(requestParameters.effectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogmaEffectFromJSON(jsonValue));
    }

    /**
     */
    async getDogmaEffect(requestParameters: GetDogmaEffectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DogmaEffect> {
        const response = await this.getDogmaEffectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGroup>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{group_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGroupFromJSON(jsonValue));
    }

    /**
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGroup> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupBundleRaw(requestParameters: GetGroupBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bundle>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroupBundle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{group_id}/bundle`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
    }

    /**
     */
    async getGroupBundle(requestParameters: GetGroupBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bundle> {
        const response = await this.getGroupBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getIconRaw(requestParameters: GetIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Icon>> {
        if (requestParameters.iconId === null || requestParameters.iconId === undefined) {
            throw new runtime.RequiredError('iconId','Required parameter requestParameters.iconId was null or undefined when calling getIcon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/icons/{icon_id}`.replace(`{${"icon_id"}}`, encodeURIComponent(String(requestParameters.iconId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IconFromJSON(jsonValue));
    }

    /**
     */
    async getIcon(requestParameters: GetIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Icon> {
        const response = await this.getIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMarketGroupRaw(requestParameters: GetMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketGroup>> {
        if (requestParameters.marketGroupId === null || requestParameters.marketGroupId === undefined) {
            throw new runtime.RequiredError('marketGroupId','Required parameter requestParameters.marketGroupId was null or undefined when calling getMarketGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/market_groups/{market_group_id}`.replace(`{${"market_group_id"}}`, encodeURIComponent(String(requestParameters.marketGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketGroupFromJSON(jsonValue));
    }

    /**
     */
    async getMarketGroup(requestParameters: GetMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketGroup> {
        const response = await this.getMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMarketGroupBundleRaw(requestParameters: GetMarketGroupBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bundle>> {
        if (requestParameters.marketGroupId === null || requestParameters.marketGroupId === undefined) {
            throw new runtime.RequiredError('marketGroupId','Required parameter requestParameters.marketGroupId was null or undefined when calling getMarketGroupBundle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/market_groups/{market_group_id}/bundle`.replace(`{${"market_group_id"}}`, encodeURIComponent(String(requestParameters.marketGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
    }

    /**
     */
    async getMarketGroupBundle(requestParameters: GetMarketGroupBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bundle> {
        const response = await this.getMarketGroupBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get metadata about the API.
     */
    async getMetaRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefDataMeta>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefDataMetaFromJSON(jsonValue));
    }

    /**
     * Get metadata about the API.
     */
    async getMeta(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefDataMeta> {
        const response = await this.getMetaRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMetaGroupRaw(requestParameters: GetMetaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaGroup>> {
        if (requestParameters.metaGroupId === null || requestParameters.metaGroupId === undefined) {
            throw new runtime.RequiredError('metaGroupId','Required parameter requestParameters.metaGroupId was null or undefined when calling getMetaGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta_groups/{meta_group_id}`.replace(`{${"meta_group_id"}}`, encodeURIComponent(String(requestParameters.metaGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaGroupFromJSON(jsonValue));
    }

    /**
     */
    async getMetaGroup(requestParameters: GetMetaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaGroup> {
        const response = await this.getMetaGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMutaplasmidRaw(requestParameters: GetMutaplasmidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mutaplasmid>> {
        if (requestParameters.mutaplasmidTypeId === null || requestParameters.mutaplasmidTypeId === undefined) {
            throw new runtime.RequiredError('mutaplasmidTypeId','Required parameter requestParameters.mutaplasmidTypeId was null or undefined when calling getMutaplasmid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mutaplasmids/{mutaplasmid_type_id}`.replace(`{${"mutaplasmid_type_id"}}`, encodeURIComponent(String(requestParameters.mutaplasmidTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MutaplasmidFromJSON(jsonValue));
    }

    /**
     */
    async getMutaplasmid(requestParameters: GetMutaplasmidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mutaplasmid> {
        const response = await this.getMutaplasmidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a region.
     */
    async getRegionRaw(requestParameters: GetRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Region>> {
        if (requestParameters.regionId === null || requestParameters.regionId === undefined) {
            throw new runtime.RequiredError('regionId','Required parameter requestParameters.regionId was null or undefined when calling getRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions/{region_id}`.replace(`{${"region_id"}}`, encodeURIComponent(String(requestParameters.regionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionFromJSON(jsonValue));
    }

    /**
     * Get a region.
     */
    async getRegion(requestParameters: GetRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Region> {
        const response = await this.getRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all root market group IDs.
     */
    async getRootMarketGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/market_groups/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all root market group IDs.
     */
    async getRootMarketGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getRootMarketGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get bundle for root market groups.
     */
    async getRootMarketGroupsBundleRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bundle>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/market_groups/root/bundle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
    }

    /**
     * Get bundle for root market groups.
     */
    async getRootMarketGroupsBundle(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bundle> {
        const response = await this.getRootMarketGroupsBundleRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSchematicRaw(requestParameters: GetSchematicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Schematic>> {
        if (requestParameters.schematicId === null || requestParameters.schematicId === undefined) {
            throw new runtime.RequiredError('schematicId','Required parameter requestParameters.schematicId was null or undefined when calling getSchematic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schematics/{schematic_id}`.replace(`{${"schematic_id"}}`, encodeURIComponent(String(requestParameters.schematicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchematicFromJSON(jsonValue));
    }

    /**
     */
    async getSchematic(requestParameters: GetSchematicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Schematic> {
        const response = await this.getSchematicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSkillRaw(requestParameters: GetSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters.skillTypeId === null || requestParameters.skillTypeId === undefined) {
            throw new runtime.RequiredError('skillTypeId','Required parameter requestParameters.skillTypeId was null or undefined when calling getSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{skill_type_id}`.replace(`{${"skill_type_id"}}`, encodeURIComponent(String(requestParameters.skillTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillFromJSON(jsonValue));
    }

    /**
     */
    async getSkill(requestParameters: GetSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Skill> {
        const response = await this.getSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTypeRaw(requestParameters: GetTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryType>> {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling getType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/types/{type_id}`.replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters.typeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryTypeFromJSON(jsonValue));
    }

    /**
     */
    async getType(requestParameters: GetTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryType> {
        const response = await this.getTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTypeBundleRaw(requestParameters: GetTypeBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bundle>> {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling getTypeBundle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/types/{type_id}/bundle`.replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters.typeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
    }

    /**
     */
    async getTypeBundle(requestParameters: GetTypeBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bundle> {
        const response = await this.getTypeBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUnitRaw(requestParameters: GetUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.unitId === null || requestParameters.unitId === undefined) {
            throw new runtime.RequiredError('unitId','Required parameter requestParameters.unitId was null or undefined when calling getUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/units/{unit_id}`.replace(`{${"unit_id"}}`, encodeURIComponent(String(requestParameters.unitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     */
    async getUnit(requestParameters: GetUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Unit> {
        const response = await this.getUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
